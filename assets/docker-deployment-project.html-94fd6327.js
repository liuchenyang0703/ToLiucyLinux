import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as p,a,b as n,d as e,e as o}from"./app-8d307529.js";const l={},c=a("strong",null,"从0了解到云服务器",-1),d={href:"https://blog.csdn.net/qq_58608526/article/details/132912154?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},u=a("strong",null,"去装装13",-1),g=o('<h2 id="_1-服务器其他注意事项" tabindex="-1"><a class="header-anchor" href="#_1-服务器其他注意事项" aria-hidden="true">#</a> 1. 服务器其他注意事项</h2><blockquote><p>在我们开始之前，我们还需要了解我们云服务器的一些其他知识点，那就是关于安全组，那到底是什么安全组呢，让我们一步一步来了解😎😎😎。</p></blockquote><h3 id="_1-1-什么是安全组" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是安全组" aria-hidden="true">#</a> 1.1 什么是安全组</h3><p><strong>安全组是一个逻辑上的分组</strong>，为具有相同安全保护需求并相互信任的云服务器、云容器、云数据库等实例提供访问策略。安全组创建后，用户可以在安全组中定义各种访问规则，当实例加入该安全组后，即受到这些访问规则的保护。</p><p>您可以在安全组中添加入方向规则和出方向规则，用来控制安全组内实例入方向和出方向的网络流量。一个实例可以关联多个安全组，多个安全组按照优先级顺序依次匹配。安全组序号越小，表示优先级越高。</p><p>如果您未创建任何安全组，那么在首次创建需要使用安全组的实例时（比如弹性云服务器），系统会自动为您创建一个默认安全组并关联至该实例。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309152343193.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单来说就是</p><p><strong>安全组是一种虚拟防火墙</strong>，具备有状态的数据包过滤功能，用于设置云服务器、负载均衡、云数据库等实例的网络访问控制，控制实例级别的出入流量，是重要的网络安全隔离手段。 您可以通过配置安全组规则，允许或禁止安全组内的实例的出流量和入流量。</p><h3 id="_1-2-安全组的特点" tabindex="-1"><a class="header-anchor" href="#_1-2-安全组的特点" aria-hidden="true">#</a> 1.2 安全组的特点</h3><ul><li>安全组是一个逻辑上的分组，可以将同一节点或同一VPC网络内具有相同网络安全隔离需求的云服务器加到同一个安全组内。</li><li>同一安全组内的云服务器之间默认内网网络互通。</li><li>在没有设置允许访问的安全组规则的情况下，不同安全组内的云服务器默认内网不通。</li><li>安全组是有状态的，对于您已允许的入站流量，都将自动允许其流出，反之亦然。</li></ul><h3 id="_1-3-安全组有什么作用" tabindex="-1"><a class="header-anchor" href="#_1-3-安全组有什么作用" aria-hidden="true">#</a> 1.3 安全组有什么作用</h3><p>通过部署云服务器安全组，可以在同一地域的不同服务器之间实现内网互通与资源拷贝；当服务器被黑客操控，也可以通过修改远程端口以限制登录IP；另外，安全组还支持通过公网远程连接和管理服务器，用户可以通过HTTP、HTTPS服务访问到您的网站。</p><h3 id="_1-4-安全组的规则" tabindex="-1"><a class="header-anchor" href="#_1-4-安全组的规则" aria-hidden="true">#</a> 1.4 安全组的规则</h3><p>了更好地管理安全组的入出方向，我们可以设置安全组规则，去控制云服务器的出入向流量。通过配置适当的规则，控制和保护加入安全组的弹性云服务器的访问。</p><ul><li>安全组规则可分为入向规则和出向规则。入向规则用于控制流入服务器实例的流量，出向规则用于控制从服务器实例流出的流量。默认安全组会自带一些默认规则，您也可以自定义添加安全组规则。</li><li>安全组规则主要遵循白名单机制，具体说明如下： <ol><li>入方向规则：入方向指外部访问安全组内的云服务器的指定端口。当外部请求匹配上安全组中入方向规则的源地址，并且授权策略为“允许”时，允许该请求进入，其他请求一律拦截。通常情况下，您一般不用在入方向配置授权策略为“拒绝”的规则，因为不匹配“允许”规则的请求均会被拦截。</li><li>出方向规则：出方向指安全组内的云服务器访问外部的指定端口。在出方向中放通全部协议和端口，配置全零IP地址，并且策略为“允许”时，允许所有的内部请求出去。0.0.0.0/0表示所有IPv4地址，::/0表示所有IPv6地址。</li></ol></li></ul><p>可以参考下面这张图</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309152347805.png" alt="image-20230915234753742" tabindex="0" loading="lazy"><figcaption>image-20230915234753742</figcaption></figure><p><strong>默认安全组规则如下：</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309152348362.png" alt="image-20230915234835212" tabindex="0" loading="lazy"><figcaption>image-20230915234835212</figcaption></figure><p>在我们的云耀服务器详情页面可以找到安全组配置</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309152353693.png" alt="image-20230915235309594" tabindex="0" loading="lazy"><figcaption>image-20230915235309594</figcaption></figure><h3 id="_1-5-关于安全组的一些建议" tabindex="-1"><a class="header-anchor" href="#_1-5-关于安全组的一些建议" aria-hidden="true">#</a> 1.5 关于安全组的一些建议</h3><p>以下是一些关于安全组的建议和实践经验，帮助确保您的云环境的安全性，可以根据具体需求和环境来制定适合的安全组策略：</p><ul><li>原则上，安全组规则取最小权限原则，通过设置所需的端口和协议，限制对必要IP地址的访问。只允许最少必要的流量进出您的资源实例。</li><li>定期更新安全组规则，以适应您的业务需求的变化。不再需要的规则应被删除，根据业务变化添加新的安全组规则。</li><li>根据资源的安全需求，将资源实例划分为不同的安全组。通过多层级的安全组可以实现细粒度的安全控制，确保安全性与灵活性之间的平衡。</li><li>通过有规范的命名等方式有意识地规划和管理安全组规则，易于查找。</li><li>安全组应与其他安全措施如网络ACL、防火墙等结合使用，以提供更全面的安全保护。</li><li>建议您不要直接修改线上环境使用的安全组，修改后的安全组会自动应用在安全组内的所有云服务器上，因此您可以先克隆一个安全组，在测试环境中进行调试，确保修改后云服务器之间的通讯正常，再将修改后的安全组同步到线上环境。</li></ul><h2 id="_2-项目选择" tabindex="-1"><a class="header-anchor" href="#_2-项目选择" aria-hidden="true">#</a> 2. 项目选择</h2><p>由于时间关系我们这里就以<strong>Github</strong>优秀的开源项目为例作为我们本次测评的项目。于是Leo也是淦了一夜，在Github上面找到了一个非常适合咱们Java程序员的前后端分离项目，非常的好上手，即使你对这个项目还不了解，但是没关系，只需要跟着我的步骤，一步一步也能实现把项目部署到云服务器，让大家可以去访问，话不多说，现在就进入我们今天的正题，年度最热前后端分离项目 。</p><h3 id="_2-1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-基本介绍" aria-hidden="true">#</a> 2.1 基本介绍</h3><p>那就是 <strong>Ruoyi-Vue</strong>，相信对开源有了解的朋友们一定对他有所了解，一个基于<strong>SpringBoot</strong>的权限管理系统，完全的响应式布局。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309160836763.png" alt="image-20230916083644637" tabindex="0" loading="lazy"><figcaption>image-20230916083644637</figcaption></figure><h3 id="_2-2-丰富的生态系统" tabindex="-1"><a class="header-anchor" href="#_2-2-丰富的生态系统" aria-hidden="true">#</a> 2.2 丰富的生态系统</h3><p>并且使用了主流的<strong>完善生态系统以及</strong>完善<strong>生态系统</strong> ，比如<code>Bootstrap多模块版本</code>，<code>前后端分离版本</code>，<code>微服务版本</code>，<code>uniap版本</code>，本文选择的是<strong>前后端分离版本</strong>。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309160837374.png" alt="image-20230916083748242" tabindex="0" loading="lazy"><figcaption>image-20230916083748242</figcaption></figure><h3 id="_1-3-丰富的拓展组件" tabindex="-1"><a class="header-anchor" href="#_1-3-丰富的拓展组件" aria-hidden="true">#</a> 1.3 丰富的拓展组件</h3><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309160841177.png" alt="image-20230916084154088" tabindex="0" loading="lazy"><figcaption>image-20230916084154088</figcaption></figure><h3 id="_1-4-详细的文档" tabindex="-1"><a class="header-anchor" href="#_1-4-详细的文档" aria-hidden="true">#</a> 1.4 详细的文档</h3><p>这里提供了详细的文档，一些项目中的组件介绍，环境部署都有详细的说明，甚至还有一些<strong>插件集成</strong>，感兴趣的小伙伴们动手去看看，这对你上手一个开源项目是非常重要的一点。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309160842551.png" alt="image-20230916084224427" tabindex="0" loading="lazy"><figcaption>image-20230916084224427</figcaption></figure><h2 id="_3-部署过程" tabindex="-1"><a class="header-anchor" href="#_3-部署过程" aria-hidden="true">#</a> 3. 部署过程</h2><h3 id="_3-1-拉取项目" tabindex="-1"><a class="header-anchor" href="#_3-1-拉取项目" aria-hidden="true">#</a> 3.1 拉取项目</h3><p>我们首先去<strong>Github</strong> 把项目拉下来，这里我把地址贴出来，方便小伙伴们直达哈</p>',41),m={href:"https://github.com/yangzongzhuan/RuoYi-Vue3",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/yangzongzhuan/RuoYi-Vue/tree/master",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/qq_58608526/article/details/131800454?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},h=o(`<h3 id="_3-2-开始配置环境" tabindex="-1"><a class="header-anchor" href="#_3-2-开始配置环境" aria-hidden="true">#</a> 3.2 开始配置环境</h3><p>我们把项目拉取到本地之后，后端项目使用<strong>IDEA</strong>开发工具打开，前段Vue3项目我是通过 <strong>Webstrom</strong> 进行打开，当然使用 <strong>Vscode</strong> 也是一样，工具嘛，适合自己就是最好的，记住一句话，工具永远是来服务你的，而是为了一个学习工具让你成为它的奴隶。</p><h4 id="_1-前端安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-前端安装依赖" aria-hidden="true">#</a> 1. 前端安装依赖</h4><p>前端在根目录使用 npm install 命令进行安装依赖</p><p>进入项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> RuoYi-Vue3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161054528.png" alt="image-20230916105447073" tabindex="0" loading="lazy"><figcaption>image-20230916105447073</figcaption></figure><p>然后就可以启动我们前端的服务了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),b={href:"http://localhost:80",target:"_blank",rel:"noopener noreferrer"},f=a("figure",null,[a("img",{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161124709.png",alt:"image-20230916112430729",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20230916112430729")],-1),x=a("h4",{id:"_2-后端配置maven依赖",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-后端配置maven依赖","aria-hidden":"true"},"#"),n(" 2. 后端配置Maven依赖")],-1),_={href:"https://blog.csdn.net/qq_58608526/article/details/129547081?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},y=o(`<figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161057254.png" alt="image-20230916105719048" tabindex="0" loading="lazy"><figcaption>image-20230916105719048</figcaption></figure><h4 id="_3-导入数据库" tabindex="-1"><a class="header-anchor" href="#_3-导入数据库" aria-hidden="true">#</a> 3. 导入数据库</h4><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161059900.png" alt="image-20230916105932523" tabindex="0" loading="lazy"><figcaption>image-20230916105932523</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161100317.png" alt="image-20230916110028977" tabindex="0" loading="lazy"><figcaption>image-20230916110028977</figcaption></figure><p>我们可以再sql文件中找到 <code>ry_20230706.sql</code>文件，并且在 <code>ruoyi-admin</code> 这一模块中的 <strong>application-durid.yml</strong> 的配置文件中找到数据库中的配置。</p><p>于是我们启动我们的<code>Navicat</code> 中新建一个ry-vue的数据库，记住这里一定要和配置文件中的数据库名称一一对应，不然项目启动的时候会找不到数据库名称报错。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161103084.png" alt="image-20230916110326010" tabindex="0" loading="lazy"><figcaption>image-20230916110326010</figcaption></figure><p>然后把我们的 <code>ry_20230706.sql</code> 导入数据库中即可。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161105133.png" alt="image-20230916110502086" tabindex="0" loading="lazy"><figcaption>image-20230916110502086</figcaption></figure><p>这样就大功告成了！</p><p>后端启动RuyiApplication启动类即可。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161126433.png" alt="image-20230916112626297" tabindex="0" loading="lazy"><figcaption>image-20230916112626297</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161127693.png" alt="image-20230916112732564" tabindex="0" loading="lazy"><figcaption>image-20230916112732564</figcaption></figure><p>即可进行登录到我们的页面。</p><h3 id="_3-3-服务器部署" tabindex="-1"><a class="header-anchor" href="#_3-3-服务器部署" aria-hidden="true">#</a> 3.3 服务器部署</h3><p>以上我们演示了关于本地进行部署前后端分离项目，但是我们今天的主题是把它部署到我们的华为云服务器上，公网上让大家都可以进行访问。</p><h4 id="_1-docker环境安装" tabindex="-1"><a class="header-anchor" href="#_1-docker环境安装" aria-hidden="true">#</a> 1. Docker环境安装</h4><h5 id="_1-1-centos安装docker" tabindex="-1"><a class="header-anchor" href="#_1-1-centos安装docker" aria-hidden="true">#</a> 1.1 Centos安装Docker</h5><h5 id="_1-2-卸载-可选" tabindex="-1"><a class="header-anchor" href="#_1-2-卸载-可选" aria-hidden="true">#</a> 1.2 卸载（可选）</h5><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>yum remove docker \\
                  docker<span class="token operator">-</span>client \\
                  docker<span class="token operator">-</span>client<span class="token operator">-</span>latest \\
                  docker<span class="token operator">-</span>common \\
                  docker<span class="token operator">-</span>latest \\
                  docker<span class="token operator">-</span>latest<span class="token operator">-</span>logrotate \\
                  docker<span class="token operator">-</span>logrotate \\
                  docker<span class="token operator">-</span>selinux \\
                  docker<span class="token operator">-</span>engine<span class="token operator">-</span>selinux \\
                  docker<span class="token operator">-</span>engine \\
                  docker<span class="token operator">-</span>ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-安装docker" tabindex="-1"><a class="header-anchor" href="#_1-3-安装docker" aria-hidden="true">#</a> 1.3 安装Docker</h5>`,22),z={href:"https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%81%94%E7%BD%91&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},j=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
           device-mapper-persistent-data <span class="token punctuation">\\</span>
           lvm2 --skip-broken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>安装Docker的依赖库。</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>yum install <span class="token operator">-</span>y yum-utils device-mapper-persistent-<span class="token keyword">data</span> lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>添加Docker CE的软件源信息。</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>yum-config-manager <span class="token operator">--</span><span class="token function">add-repo</span> http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/docker-ce/linux/centos/docker-ce<span class="token punctuation">.</span>repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>安装Docker CE。</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>yum makecache fast
yum <span class="token operator">-</span>y install docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</strong></p><h5 id="_1-4-启动docker" tabindex="-1"><a class="header-anchor" href="#_1-4-启动docker" aria-hidden="true">#</a> 1.4 启动Docker</h5><ol><li><strong>启动docker前，一定要关闭防火墙 (这里如果使用的是云服务器可以不用设置)</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关闭</span>
systemctl stop firewalld

<span class="token comment"># 禁止开机启动防火墙</span>
systemctl disable firewalld

<span class="token comment">#查看是否关闭防火墙</span>
systemctl status firewalld

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>通过命令启动docker</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动docker服务</span>
systemctl start <span class="token function">docker</span>

<span class="token comment"># 停止docker服务</span>
systemctl stop <span class="token function">docker</span> 

<span class="token comment"># 重启docker服务</span>
systemctl restart <span class="token function">docker</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>查看我们docker的版本</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">--version</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161152589.png" alt="image-20230916115232525" tabindex="0" loading="lazy"><figcaption>image-20230916115232525</figcaption></figure><p>到这里，Docker安装完毕。</p><h4 id="_2-其他服务安装" tabindex="-1"><a class="header-anchor" href="#_2-其他服务安装" aria-hidden="true">#</a> 2. 其他服务安装</h4><blockquote><p>部署若依前后端分离版 需要安装MySQL、Redis、Nginx</p></blockquote><h5 id="_2-1-dcoker安装mysql" tabindex="-1"><a class="header-anchor" href="#_2-1-dcoker安装mysql" aria-hidden="true">#</a> 2.1 Dcoker安装MySQL</h5><h6 id="_1-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_1-拉取镜像" aria-hidden="true">#</a> 1. 拉取镜像</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker pull mysql<span class="token operator">:</span><span class="token number">8.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2-查看是否拉取成功" tabindex="-1"><a class="header-anchor" href="#_2-查看是否拉取成功" aria-hidden="true">#</a> 2. 查看是否拉取成功</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如下便是拉取成功<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161200371.png" alt="image-20230916120037301" loading="lazy"></p><h6 id="_3-创建文件夹-配置、数据等" tabindex="-1"><a class="header-anchor" href="#_3-创建文件夹-配置、数据等" aria-hidden="true">#</a> 3. 创建文件夹(配置、数据等)</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mkdir <span class="token operator">-</span>p <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>conf
mkdir <span class="token operator">-</span>p <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>data
mkdir <span class="token operator">-</span>p <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建配置文件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>创建文件：<span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf
命令： touch <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内容如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
<span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span>set<span class="token operator">=</span>utf8mb4
 
<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
<span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span>set<span class="token operator">=</span>utf8mb4
 
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
#服务端口号 默认<span class="token number">3306</span>
port<span class="token operator">=</span><span class="token number">3306</span>
 
datadir <span class="token operator">=</span> <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>data
 
init_connect<span class="token operator">=</span>&#39;<span class="token constant">SET</span> <span class="token constant">NAMES</span> utf8mb4&#39;
character<span class="token operator">-</span>set<span class="token operator">-</span>server<span class="token operator">=</span>utf8mb4
collation<span class="token operator">-</span>server<span class="token operator">=</span>utf8mb4_unicode_ci
 
# 最大连接数
max_connections<span class="token operator">=</span><span class="token number">200</span>
 
# 连接失败的最大次数。防止有人从该主机试图攻击数据库系统
max_connect_errors<span class="token operator">=</span><span class="token number">20</span>
 
# 创建新表时将使用的默认存储引擎
<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span>engine<span class="token operator">=</span><span class="token constant">INNODB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>启动容器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker run <span class="token operator">-</span>p <span class="token number">3306</span><span class="token operator">:</span><span class="token number">3306</span>  \\
<span class="token operator">--</span>name mysql8 \\
<span class="token operator">--</span>privileged<span class="token operator">=</span><span class="token boolean">true</span> \\
<span class="token operator">-</span>v <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>log<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>mysql \\
<span class="token operator">-</span>v <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>data<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql \\
<span class="token operator">-</span>v <span class="token operator">/</span>work<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \\
<span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root \\
<span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">8.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>–privileged=true<br> 设置MySQL 的root用户权限, 否则外部不能使用root用户登陆。<br> -e MYSQL_ROOT_PASSWORD=123456<br> 设置MySQL数据库root用户的密码</p></blockquote><h6 id="_4-查看启动后的容器" tabindex="-1"><a class="header-anchor" href="#_4-查看启动后的容器" aria-hidden="true">#</a> 4. 查看启动后的容器</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker ps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161204054.png" alt="image-20230916120452989" tabindex="0" loading="lazy"><figcaption>image-20230916120452989</figcaption></figure><h6 id="_5-设置密码等" tabindex="-1"><a class="header-anchor" href="#_5-设置密码等" aria-hidden="true">#</a> 5. 设置密码等</h6><blockquote><p>实际原来的root仍然有效，只不过只能localhost机器能用（在MySQL服务器上的mysql命令直连时可以使用）Navicat不能用。</p></blockquote><p><strong>1.进入容器内部</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker exec <span class="token operator">-</span>it mysql8 <span class="token operator">/</span>bin<span class="token operator">/</span>bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.连接mysql</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161205469.png" alt="image-20230916120533405" loading="lazy"><br> 输入前边设置的密码：root，然后回车。</p><p><strong>3.修改访问主机以及密码</strong></p><p>设置为所有主机可访问</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ALTER</span> <span class="token constant">USER</span> <span class="token char">&#39;root&#39;</span>@<span class="token char">&#39;%&#39;</span> <span class="token constant">IDENTIFIED</span> <span class="token constant">BY</span> <span class="token char">&#39;新密码&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47),L={href:"https://so.csdn.net/so/search?q=Mysql8&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},q=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">CREATE</span> <span class="token constant">USER</span> <span class="token char">&#39;root&#39;</span>@<span class="token char">&#39;%&#39;</span> <span class="token constant">IDENTIFIED</span> <span class="token constant">WITH</span> <span class="token constant">MYSQL_NATIVE_PASSWORD</span> <span class="token constant">BY</span> <span class="token char">&#39;222333&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4.刷新权限</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FLUSH</span> <span class="token constant">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>完工！！！</strong></p><p><strong>5. 我们可以Navicat 远程连接</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161208775.png" alt="image-20230916120809646" tabindex="0" loading="lazy"><figcaption>image-20230916120809646</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161208423.png" alt="image-20230916120820351" tabindex="0" loading="lazy"><figcaption>image-20230916120820351</figcaption></figure><h5 id="_2-2-docker安装redis" tabindex="-1"><a class="header-anchor" href="#_2-2-docker安装redis" aria-hidden="true">#</a> 2.2 Docker安装Redis</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span> 拉取redis镜像
# 不指定版本号，默认拉取最新版的redis 
docker pull redis
# 指定的版本号 docker pull redis<span class="token operator">:</span><span class="token number">5.0</span><span class="token number">.14</span>
# 查看镜像是否拉取成功docker images

<span class="token number">2.</span> 运行redis
# 带密码认证的redis，登录时需要输入验证码  appendonly（redis是否持久化）
docker run <span class="token operator">--</span>name redis <span class="token operator">-</span>p <span class="token number">6379</span><span class="token operator">:</span><span class="token number">6379</span> <span class="token operator">-</span>d <span class="token operator">--</span>restart<span class="token operator">=</span>always redis redis<span class="token operator">-</span>server <span class="token operator">--</span>appendonly yes <span class="token operator">--</span>requirepass <span class="token class-name">Leo666</span>

# 不带密码认证的redis
docker run <span class="token operator">--</span>name redis <span class="token operator">-</span>p <span class="token number">6379</span><span class="token operator">:</span><span class="token number">6379</span> <span class="token operator">-</span>d <span class="token operator">--</span>restart<span class="token operator">=</span>always redis redis<span class="token operator">-</span>server <span class="token operator">--</span>appendonly yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-docker安装nginx" tabindex="-1"><a class="header-anchor" href="#_2-3-docker安装nginx" aria-hidden="true">#</a> 2.3 Docker安装Nginx</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 拉取nginx
docker pull nginx<span class="token operator">:</span><span class="token number">1.18</span>

# 挂载文件 本地路径
mkdir	<span class="token operator">-</span>p <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf
mkdir	<span class="token operator">-</span>p <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>log
mkdir	<span class="token operator">-</span>p <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>html
# 挂载
# 生成容器
docker run <span class="token operator">--</span>name nginx <span class="token operator">-</span>p <span class="token number">80</span><span class="token operator">:</span><span class="token number">80</span> <span class="token operator">-</span>d nginx<span class="token operator">:</span><span class="token number">1.18</span>
docker run <span class="token operator">--</span>name nginx <span class="token operator">-</span>p <span class="token number">100</span><span class="token operator">:</span><span class="token number">80</span> <span class="token operator">-</span>d nginx<span class="token operator">:</span><span class="token number">1.18</span>

# 将容器nginx<span class="token punctuation">.</span>conf文件复制到宿主机
# 将容器conf<span class="token punctuation">.</span>d文件夹下内容复制到宿主机
# 将容器中的html文件夹复制到宿主机

docker cp nginx<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf
docker cp nginx<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>conf<span class="token punctuation">.</span>d
docker cp nginx<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>
#卸载
docker rm <span class="token operator">-</span>f nginx
#真实安装
docker run \\
<span class="token operator">-</span>p <span class="token number">80</span><span class="token operator">:</span><span class="token number">80</span> \\
<span class="token operator">--</span>name nginx \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>log<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>nginx \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html \\
<span class="token operator">-</span>d nginx<span class="token operator">:</span><span class="token number">1.18</span>
——————————————————————————————
docker run \\
<span class="token operator">-</span>p <span class="token number">100</span><span class="token operator">:</span><span class="token number">80</span> \\
<span class="token operator">--</span>name nginx \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>log<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>nginx \\
<span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html \\
<span class="token operator">-</span>d nginx<span class="token operator">:</span><span class="token number">1.18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-部署若依项目" tabindex="-1"><a class="header-anchor" href="#_3-部署若依项目" aria-hidden="true">#</a> 3. 部署若依项目</h4><h5 id="_3-1-连接远程服务器" tabindex="-1"><a class="header-anchor" href="#_3-1-连接远程服务器" aria-hidden="true">#</a> 3.1 连接远程服务器</h5><p>这里我使用的是MobalXterm，具体连接操作步骤就不多叙述了。</p><h5 id="_3-2-若依前端部署" tabindex="-1"><a class="header-anchor" href="#_3-2-若依前端部署" aria-hidden="true">#</a> 3.2 若依前端部署</h5><p>打开dos窗口，进入 Ruoyi-Vue3文件夹，并对前端代码进行打包,生成一个dist文件夹，这就是前端代码打包后的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build:prod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161142353.png" alt="image-20230916114203235" tabindex="0" loading="lazy"><figcaption>image-20230916114203235</figcaption></figure><p>将打包好的 <strong>dist文件夹</strong> 通过 <code>MobalXterm</code>上传到 /<strong>home/nginx/html</strong> 中</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161305748.png" alt="image-20230916130527657" tabindex="0" loading="lazy"><figcaption>image-20230916130527657</figcaption></figure><p>进入**/home/nginx/conf/conf.d** 目录中，新建 <strong>ruoyi-vue3.conf</strong>，添加以下内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>  /home/nginx/conf/conf.d
<span class="token function">touch</span> ruoyi-vue3.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    listen  <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80<span class="token punctuation">;</span>
    server_name  <span class="token number">110.42</span>.223.238<span class="token punctuation">;</span>
    <span class="token comment">#charset koi8-r;</span>
    <span class="token comment">#access_log  /var/log/nginx/host.access.log  main;</span>
    location / <span class="token punctuation">{</span>
        root    /usr/share/nginx/html/dist<span class="token punctuation">;</span> 
        index  index.html index.htm<span class="token punctuation">;</span>
        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  location /prod-api/<span class="token punctuation">{</span>
	    proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
	    proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
	    proxy_set_header REMOTE-HOST <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
	    proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
	    proxy_pass http://110.42.253.238:8686/<span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
    <span class="token comment">#error_page  404              /404.html;</span>

    <span class="token comment"># redirect server error pages to the static page /50x.html</span>
    <span class="token comment">#</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
        root   /usr/share/nginx/html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： 这里有几个地方需要更改，这非常重要</p><p>我们进入到我们的 <strong>ruoyi-vue3.conf</strong> 的配置文件</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161557092.png" alt="image-20230916155714955" tabindex="0" loading="lazy"><figcaption>image-20230916155714955</figcaption></figure><p>打开谷歌浏览器，输入ip 地址访问</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161309689.png" alt="image-20230916130949765" tabindex="0" loading="lazy"><figcaption>image-20230916130949765</figcaption></figure><p>到这一步，我们服务器部署前端部分就完成了。</p><h5 id="_3-3-若依后端部署" tabindex="-1"><a class="header-anchor" href="#_3-3-若依后端部署" aria-hidden="true">#</a> 3.3 若依后端部署</h5><p>下面我需要改造一下我们后端代码，在此之前我们的数据库以及我们的Redis都是运行在我们本地，现在我们所有的服务器都是云服务器上面，所以我们需要对我们的 <strong>application.yml</strong> 配置文件进行更改。</p><p><strong>修改数据库配置</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161313022.png" alt="image-20230916131333914" tabindex="0" loading="lazy"><figcaption>image-20230916131333914</figcaption></figure><p><strong>修改Redis配置</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161315383.png" alt="image-20230916131531220" tabindex="0" loading="lazy"><figcaption>image-20230916131531220</figcaption></figure><p><strong>打包后端代码 jar包</strong></p><p>熟练Java项目开发的，可以直接通过InteliJ IDEA或者eclipse软件打jar包。不熟悉的有第二种方法，是若依提供的。进入下载的项目文件夹中的bin目录下，直接双击执行 <strong>package.bat</strong>，它会直接在项目中生成target文件夹，里面包含以及打包好的jar包。我们要使用的是ruoyi-admin文件夹下的target里的jar包。运行 package.bat 需要Maven环境&gt;=3.0，操作顺序如下图：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161317594.png" alt="image-20230916131712497" tabindex="0" loading="lazy"><figcaption>image-20230916131712497</figcaption></figure><p>打包之后我们可以再ruoyi-admin包下面的的 target目录找到 这个jar包 ，把他上传到服务器即可。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161318079.png" alt="image-20230916131816985" tabindex="0" loading="lazy"><figcaption>image-20230916131816985</figcaption></figure><p>再上传到服务器之前，我们还有一个很重要的事情需要做，那就是我们的 <strong>安全组</strong>，我们需要开放对MySQL 3306端口，Redis 6379端口以及我们若依后台项目的端口8080。下面我进入华为云详情页面的安全组管理，并添加规则。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161325063.png" alt="image-20230916132540947" tabindex="0" loading="lazy"><figcaption>image-20230916132540947</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161326544.png" alt="image-20230916132624469" tabindex="0" loading="lazy"><figcaption>image-20230916132624469</figcaption></figure><ol><li>将打包好的jar包通过MobalXterm上传至/opt/project 目录（project目录需要自己手动创建）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /opt/project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>编写DockerFile 文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> Dockerfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">FROM</span> openjdk<span class="token operator">:</span><span class="token number">8</span>
<span class="token constant">ADD</span> ruoyi<span class="token operator">-</span>admin<span class="token punctuation">.</span>jar ruoyi<span class="token operator">-</span>admin<span class="token punctuation">.</span>jar
<span class="token constant">EXPOSE</span> <span class="token number">8035</span>
<span class="token constant">ENTRYPOINT</span> <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ruoyi-admin.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面这些复制到Dockerfile即可</p><p><code>注意</code> ： <strong>DockerFile文件和jar包放在同一目录下</strong></p><ol start="3"><li>将项目挂载到docker镜像中 后面有个点. 千万不要忘记复制</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ruoyi-admin.jar <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>运行docker镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--name</span> ruoyi-admin.jar ruoyi-admin.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>成功部署效果图</li></ol><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202309161558255.png" alt="image-20230916155801093" tabindex="0" loading="lazy"><figcaption>image-20230916155801093</figcaption></figure><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>以上便是本次教程的全部内容，可以看出来我们使用Docker容器化部署，让我们部署项目更加快捷，小伙伴还在犹豫什么，赶紧行动起来！部署方面有什么问题欢迎跟我评论区留言😎😎😎！</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,59);function w(D,E){const s=r("ExternalLinkIcon");return t(),p("div",null,[a("p",null,[n("大家好，我是Leo🫣🫣🫣，上一篇我们 "),c,n(" 的一些基本概念和基本命令，没看的小伙伴可以先去看一下这一篇，"),a("a",d,[n("带你从0认识云服务器"),e(s)]),n(" ，但是最近有粉丝朋友私信我说， “ Leo哥，我是一名Java后端程序员，在我看来，这个云服务器在手里也不能停留在只是一些基本概念和基本命令这个层面，能不能讲一讲如果把一个前后端分离项目部署到云服务器上面啊，好让我拿"),u,n(" 😜😜😜”。这位朋友有这个想法确实不错，我们学习一个新东西，确实应该把他运用到我们实际的开发中，话不多说，让我们开始吧😎😎😎。")]),g,a("p",null,[a("a",m,[n("前台Vue3"),e(s)])]),a("p",null,[a("a",v,[n("后台Maven聚合"),e(s)])]),a("p",null,[n("这里我们前端使用的是Vue3版本，目前Vue3已逐渐普及在企业中，我觉得非常有必要学习一下Vue3，有Vue2基础的同学基本看看api文档就可以很快入手了。有需要的小伙伴可以通过我这一篇博客进行学习 "),a("a",k,[n("Vue3"),e(s)])]),h,a("p",null,[n("浏览器打开 "),a("a",b,[n("http://localhost:80"),e(s)]),n(" 即可看到前端登录页面")]),f,x,a("p",null,[n("后端进入之后首先进入设置界面 ，对我们本地Maven进行配置，如果本地没有安装Maven的同学也可以使用IDEA自带的Maven3，当时有需要安装配置Maven的可以通过我这一篇博客进行学习，"),a("a",_,[n("最详细的Maven安装及配置"),e(s)])]),y,a("ol",null,[a("li",null,[n("如果使用的是虚拟机，首先需要"),a("a",z,[n("虚拟机联网"),e(s)]),n(" 安装yum工具")])]),j,a("p",null,[a("a",L,[n("Mysql8"),e(s)]),n(".0 默认采用 caching-sha2-password 加密，有可能旧的客户端不支持，可改为 mysql_native_password;")]),q])}const R=i(l,[["render",w],["__file","docker-deployment-project.html.vue"]]);export{R as default};
