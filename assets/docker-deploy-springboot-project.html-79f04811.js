import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-8d307529.js";const i={},t=e(`<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><p>笔者开发环境： 华为云服务器 + IDEA2023 + JDK1.8 + Maven3.8。</p><p>​</p><h2 id="_2-实战步骤" tabindex="-1"><a class="header-anchor" href="#_2-实战步骤" aria-hidden="true">#</a> 2. 实战步骤</h2><h3 id="_2-1-编写测试接口" tabindex="-1"><a class="header-anchor" href="#_2-1-编写测试接口" aria-hidden="true">#</a> 2.1 编写测试接口</h3><p>打开我们的IDEA创建一个简单的SpringBoot项目，编写TestController，编写一个简单的测试接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>leo<span class="token punctuation">.</span>demo02<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023-10-17 14:15
 * <span class="token keyword">@description</span> : 测试
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token string">&quot;这是用来测试SpringBoot接口部署到服务器的接口测试!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用maven打jar包" tabindex="-1"><a class="header-anchor" href="#_2-2-使用maven打jar包" aria-hidden="true">#</a> 2.2 使用Maven打jar包</h3><h4 id="_1-使用package命令打包" tabindex="-1"><a class="header-anchor" href="#_1-使用package命令打包" aria-hidden="true">#</a> 1.使用package命令打包</h4><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171421024.png" alt="image-20231017142102923" tabindex="0" loading="lazy"><figcaption>image-20231017142102923</figcaption></figure><h4 id="_2-打包成功" tabindex="-1"><a class="header-anchor" href="#_2-打包成功" aria-hidden="true">#</a> 2. 打包成功</h4><p>看到下面BUIDL SUCCES 就说明打包成功了</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171424843.png" alt="image-20231017142404696" tabindex="0" loading="lazy"><figcaption>image-20231017142404696</figcaption></figure><h4 id="_3-查看jar包" tabindex="-1"><a class="header-anchor" href="#_3-查看jar包" aria-hidden="true">#</a> 3. 查看jar包</h4><p>可以在target目录看到我们的jar包</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171424983.png" alt="image-20231017142457929" tabindex="0" loading="lazy"><figcaption>image-20231017142457929</figcaption></figure><h4 id="_4-启动jar包进行测试" tabindex="-1"><a class="header-anchor" href="#_4-启动jar包进行测试" aria-hidden="true">#</a> 4.启动jar包进行测试</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar jar包名称（填写你自己的jar包名称）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171427007.png" alt="image-20231017142739915" tabindex="0" loading="lazy"><figcaption>image-20231017142739915</figcaption></figure><p>启动成功，浏览器访问ip + 端口号 + 访问路径即可访问。</p><p>​ <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171428521.png" alt="image-20231017142855477" loading="lazy"></p><p><strong>访问成功!</strong></p><h3 id="_2-3-编写dockerfile文件内容" tabindex="-1"><a class="header-anchor" href="#_2-3-编写dockerfile文件内容" aria-hidden="true">#</a> 2.3 编写Dockerfile文件内容</h3><p>这里笔者使用的是JDK11</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM openjdk:11 <span class="token comment"># FROM: 基础镜像，基于jdk8镜像开始</span>

COPY *.jar /app.jar  <span class="token comment"># COPY: 将应用的配置文件也拷贝到镜像中。</span>

CMD <span class="token punctuation">[</span><span class="token string">&quot;--server.port=8400&quot;</span><span class="token punctuation">]</span>

EXPOSE <span class="token number">8400</span>  <span class="token comment"># EXPOSE：声明端口</span>
 
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;/app.jar&quot;</span><span class="token punctuation">]</span>  
<span class="token comment"># ENTRYPOINT：docker启动时，运行的命令，这里容器启动时直接运行jar服务。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-把jar包以及dockerfile上传到linux服务器" tabindex="-1"><a class="header-anchor" href="#_2-4-把jar包以及dockerfile上传到linux服务器" aria-hidden="true">#</a> 2.4 把jar包以及Dockerfile上传到Linux服务器</h3><p><strong>上传jar包和dockerfile文件</strong>到Linux服务器上去。</p><p>这里笔者选择的是Finalshell + 华为云服务器，大家可以自行选择。</p><p>在software目录里面创建一个test目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/software/
<span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意： software这个目录是笔者平时存放软件的地方，大家没有的话可以自行创建。</strong></p><p>把jar包和dockerfile文件上传到test目录</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171436569.png" alt="image-20231017143614515" tabindex="0" loading="lazy"><figcaption>image-20231017143614515</figcaption></figure><h3 id="_2-4-生成镜像" tabindex="-1"><a class="header-anchor" href="#_2-4-生成镜像" aria-hidden="true">#</a> 2.4 生成镜像</h3><p>目录切换到test目录并查看</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171436793.png" alt="image-20231017143654734" tabindex="0" loading="lazy"><figcaption>image-20231017143654734</figcaption></figure><p>文件已上传完毕，可以进行生产镜像了。</p><p><strong>注意： 必须这两个东西都在一个文件下，才可以。</strong></p><ul><li>docker bulid 是打包命令</li><li><code>-t</code> − 给镜像加一个Tag</li><li>后面跟的 test 就是为这个镜像取的名字</li><li><code>.</code> 小数点表示当前目录，即Dockerfile所在目录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">.</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看到下面说明镜像已经生成完毕。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171438171.png" alt="image-20231017143832087" tabindex="0" loading="lazy"><figcaption>image-20231017143832087</figcaption></figure><h3 id="_2-5-后台启动容器" tabindex="-1"><a class="header-anchor" href="#_2-5-后台启动容器" aria-hidden="true">#</a> 2.5 后台启动容器</h3><p>使用命令查看我们生成的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171439842.png" alt="image-20231017143952774" tabindex="0" loading="lazy"><figcaption>image-20231017143952774</figcaption></figure><p>确认没问题之后我们开始后台启动容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8400</span>:8400 <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-d 是后台运行</li><li>-p 8400:8400是端口映射</li><li>--name 取名字</li><li>最后跟的 test 是我打包好的镜像名称。</li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171445868.png" alt="image-20231017144513816" tabindex="0" loading="lazy"><figcaption>image-20231017144513816</figcaption></figure><p>到这里说明我们的容器已经正常运行了。</p><h3 id="_2-6-测试" tabindex="-1"><a class="header-anchor" href="#_2-6-测试" aria-hidden="true">#</a> 2.6 测试</h3><p>浏览器访问ip + 端口号 + 访问路径即可访问。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310171445670.png" alt="image-20231017144552622" tabindex="0" loading="lazy"><figcaption>image-20231017144552622</figcaption></figure><p>大功告成!</p><p>​</p><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,60),o=[t];function c(p,l){return n(),s("div",null,o)}const u=a(i,[["render",c],["__file","docker-deploy-springboot-project.html.vue"]]);export{u as default};
