import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-8d307529.js";const t={},p=e(`<h2 id="_1-静态代理设计模式" tabindex="-1"><a class="header-anchor" href="#_1-静态代理设计模式" aria-hidden="true">#</a> 1. 静态代理设计模式</h2><h3 id="_1-1-为什么需要代理设计模式" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么需要代理设计模式" aria-hidden="true">#</a> 1.1 为什么需要代理设计模式</h3><ul><li><p>在JavaEE分层开发开发中，那个层次对于我们来讲最重要</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>DAO ---&gt; Service --&gt; Controller 

JavaEE分层开发中，最为重要的是Service层
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Service层中包含了哪些代码？</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Service层中 = 核心功能(几十行 上百代码) + 额外功能(附加功能)
<span class="token list punctuation">1.</span> 核心功能
   业务运算
   DAO调用
<span class="token list punctuation">2.</span> 额外功能(事务、日志、性能...)
   <span class="token list punctuation">1.</span> 不属于业务
   <span class="token list punctuation">2.</span> 可有可无
   <span class="token list punctuation">3.</span> 代码量很小 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>额外功能书写在Service层中好不好？</p><p>Controller层（Service层的调用者）除了需要核心功能，还需要这些额外功能。</p><p>但是从软件设计者角度看：Service层最好不要写额外功能。</p></li><li><p>现实生活中的解决方式</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308151115949.png" alt="image-20230815111510825" tabindex="0" loading="lazy"><figcaption>image-20230815111510825</figcaption></figure></li></ul><p>代理模式是一种比较好理解的<code>设计模式</code>。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p><p>代理模式的主要作用是扩展<code>目标对象</code>的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p><blockquote><p>代理模式: 为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。</p><p>被代理的对象可以是<code>远程对象</code>、创建开销大的对象或需要安全控制的对象</p></blockquote><p>举个例子：当我们工作之后需要出去租房子，房东张贴广告带我看房子，最后签合同，但是房东只想坐着签合同并不想到处跑着看房子，于是就找了一个中介专门来宣传广告并且带租户看房子，而房东只负责签合同收钱！中介在这里就可以看作是代理你的<code>代理对象</code>，<code>代理的行为（方法）</code>是带租户看房子。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308151116886.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1-2-代理设计模式分析" tabindex="-1"><a class="header-anchor" href="#_1-2-代理设计模式分析" aria-hidden="true">#</a> 1.2 代理设计模式分析</h3><h4 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念" aria-hidden="true">#</a> 2.1 概念</h4><p>通过代理类，为原始类（目标）增加额外的功能 好处：利于原始类(目标)的维护</p><h4 id="_2-2-名词解释" tabindex="-1"><a class="header-anchor" href="#_2-2-名词解释" aria-hidden="true">#</a> 2.2 名词解释</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 目标类 原始类 
   指的是 业务类 (核心功能 --&gt; 业务运算 DAO调用)
<span class="token list punctuation">2.</span> 目标方法，原始方法
   目标类(原始类)中的方法 就是目标方法(原始方法)
<span class="token list punctuation">3.</span> 额外功能 (附加功能)
   日志，事务，性能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-代理开发的核心要素" tabindex="-1"><a class="header-anchor" href="#_2-3-代理开发的核心要素" aria-hidden="true">#</a> 2.3 代理开发的核心要素</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>代理类 = 实现和目标类相同的接口 + 在同名方法中添加额外功能 + 调用原始类同名方法

房东 ---&gt; public interface UserService{
               m1
               m2
          }
          UserServiceImpl implements UserService{
               m1 ---&gt; 业务运算 DAO调用
               m2 
          }
          UserServiceProxy implements UserService
               m1
               m2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-编码" tabindex="-1"><a class="header-anchor" href="#_2-4-编码" aria-hidden="true">#</a> 2.4 编码</h4><p><strong>静态代理</strong>：为每一个原始类，手动编写一个代理类 (.java .class)</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308151122402.png" alt="image-20230815112248257" tabindex="0" loading="lazy"><figcaption>image-20230815112248257</figcaption></figure><h4 id="_2-5-静态代理存在的问题" tabindex="-1"><a class="header-anchor" href="#_2-5-静态代理存在的问题" aria-hidden="true">#</a> 2.5 静态代理存在的问题</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 静态类文件数量过多，不利于项目管理
   UserServiceImpl  UserServiceProxy
   OrderServiceImpl OrderServiceProxy
<span class="token list punctuation">2.</span> 额外功能维护性差
   代理类中 额外功能修改复杂(麻烦)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-spring的动态代理开发" tabindex="-1"><a class="header-anchor" href="#_2-spring的动态代理开发" aria-hidden="true">#</a> 2. Spring的动态代理开发</h2><h3 id="_2-1-spring动态代理的概念" tabindex="-1"><a class="header-anchor" href="#_2-1-spring动态代理的概念" aria-hidden="true">#</a> 2.1 Spring动态代理的概念</h3><blockquote><p>概念：通过<code>代理类</code>为原始类(目标类)增加额外功能,代理类由Spring动态生成。<br> 好处：利于<code>原始类</code>(目标类)的维护</p></blockquote><h3 id="_2-2-搭建开发环境" tabindex="-1"><a class="header-anchor" href="#_2-2-搭建开发环境" aria-hidden="true">#</a> 2.2 搭建开发环境</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.14.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.8.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-spring动态代理的开发步骤" tabindex="-1"><a class="header-anchor" href="#_2-3-spring动态代理的开发步骤" aria-hidden="true">#</a> 2.3 Spring动态代理的开发步骤</h3><h4 id="_1-创建原始对象-目标对象" tabindex="-1"><a class="header-anchor" href="#_1-创建原始对象-目标对象" aria-hidden="true">#</a> 1. 创建原始对象(目标对象)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserServiceImpl.register&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserServiceImpl.login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;userServiceImpl&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.Leo.dynamic.service.impl.UserServiceImpl&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-定义额外功能" tabindex="-1"><a class="header-anchor" href="#_2-定义额外功能" aria-hidden="true">#</a> 2. 定义额外功能</h4><p><strong>实现MethodBeforeAdvice接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Before</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>
	<span class="token comment">//作用：给原始方法添加额外功能</span>
    <span class="token comment">//注意：会在原始方法运行之前运行此方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----method before advice log------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;before&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.Leo.dynamic.service.Before&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-定义切入点" tabindex="-1"><a class="header-anchor" href="#_3-定义切入点" aria-hidden="true">#</a> 3. 定义切入点</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 切入点：额外功能加入的位置

<span class="token list punctuation">2.</span> 目的：由程序员根据自己的需要，决定额外功能加入给那个原始方法
register()
login()

简单的测试：所有方法都做为切入点，都加入额外的功能。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* *(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-组装" tabindex="-1"><a class="header-anchor" href="#_4-组装" aria-hidden="true">#</a> 4. 组装</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 组装切入点与额外功能 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>before<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-测试调用" tabindex="-1"><a class="header-anchor" href="#_5-测试调用" aria-hidden="true">#</a> 5. 测试调用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>目的：获得<span class="token class-name">Spring</span>工厂创建的动态代理对象，并进行调用
<span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;/applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
注意：
   <span class="token number">1.</span> <span class="token class-name">Spring</span>的工厂通过	原始对象的id值获得的是代理对象
   <span class="token number">2.</span> 获得代理对象后，可以通过声明接口类型，进行对象的存储
   
<span class="token class-name">UserService</span> userService<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userServiceImpl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>控制台打印：</strong> 可以发现在日志之前输入了</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308151144512.png" alt="image-20230815114453445" tabindex="0" loading="lazy"><figcaption>image-20230815114453445</figcaption></figure><h3 id="_2-4-动态代理细节分析" tabindex="-1"><a class="header-anchor" href="#_2-4-动态代理细节分析" aria-hidden="true">#</a> 2.4 动态代理细节分析</h3><h4 id="_4-1-spring创建的动态代理类在哪里" tabindex="-1"><a class="header-anchor" href="#_4-1-spring创建的动态代理类在哪里" aria-hidden="true">#</a> 4.1 Spring创建的动态代理类在哪里？</h4><blockquote><p>Spring框架在运行时，通过动态字节码技术，在JVM创建的，运行在JVM内部，等程序结束后就消失了。</p><p>什么叫动态字节码技术:通过第三方动态字节码框架，在JVM中创建对应类的字节码，进而创建对象，当虚拟机结束，动态字节码跟着消失。</p><p>结论：动态代理不需要定义类文件，都是JVM运行过程中动态创建的，所以不会造成静态代理，类文件数量过多，影响项目管理的问题。</p></blockquote><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291502334.png" alt="image-20200423165547079" tabindex="0" loading="lazy"><figcaption>image-20200423165547079</figcaption></figure><h4 id="_4-2-动态代理编程简化代理的开发" tabindex="-1"><a class="header-anchor" href="#_4-2-动态代理编程简化代理的开发" aria-hidden="true">#</a> 4.2 动态代理编程简化代理的开发</h4><blockquote><p>在额外功能不改变的前提下，创建其他目标类（原始类）的代理对象时，只需要指定原始(目标)对象即可。</p></blockquote><h2 id="_3-spring动态代理详解" tabindex="-1"><a class="header-anchor" href="#_3-spring动态代理详解" aria-hidden="true">#</a> 3. Spring动态代理详解</h2><h3 id="_3-1-额外功能的详解" tabindex="-1"><a class="header-anchor" href="#_3-1-额外功能的详解" aria-hidden="true">#</a> 3.1 额外功能的详解</h3><ul><li><p>MethodBeforeAdvice分析</p><p>作用：<code>原始方法执行之前，运行额外功能。</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Before</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 作用：给原始方法添加额外功能
     * 注意：会在原始方法运行之前运行此方法
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 原始方法 login() register() ...
     * <span class="token keyword">@param</span> <span class="token parameter">objects</span> 原始方法的参数列表 name password ...
     * <span class="token keyword">@param</span> <span class="token parameter">o</span> 原始对象 UserServiceImpl OrderServiceImpl
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> 抛出的异常
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---- MethodBeforeAdvice  log... ----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>实战：需要时才用，可能都会用到，也有可能都不用。</p><ul><li><p>MethodInterceptor(方法拦截器)</p><p><code>MethodInterceptor</code>接口：额外功能可定义在原始方法执行 前、后、前和后。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Around</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">invocation</span> 封装了原始方法 invocation.proceed()表示原始方法的运行
     * <span class="token keyword">@return</span> 原始方法的返回值
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> 可能抛出的异常
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------ 额外功能 log -----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//原始方法的执行</span>
        <span class="token class-name">Object</span> ret <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回原始方法的返回值</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>额外功能运行在原始方法执行之后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> ret <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----额外功能运行在原始方法执行之后----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额外功能运行在原始方法执行之前和之后（实战：事务需要在之前和之后都运行）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----额外功能运行在原始方法执行之前----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Object</span> ret <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----额外功能运行在原始方法执行之后----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额外功能运行在原始方法抛出异常时</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
  
    <span class="token class-name">Object</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      ret <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----原始方法抛出异常 执行的额外功能 ---- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MethodInterceptor可以影响原始方法的返回值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------log-----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">Object</span> ret <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//拿到原始方法的返回值后进行一些操作就会影响，直接返回就不影响</span>
   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-切入点详解" tabindex="-1"><a class="header-anchor" href="#_3-2-切入点详解" aria-hidden="true">#</a> 3.2 切入点详解</h3><p>切入点决定了额外功能加入的位置。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* *(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
exection(* *(..)) ---&gt; 匹配了所有方法    a  b  c 

1. execution()  切入点函数
2. * *(..)      切入点表达式 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-切入点表达式" tabindex="-1"><a class="header-anchor" href="#_1-切入点表达式" aria-hidden="true">#</a> 1. 切入点表达式</h4><ul><li><p>方法切入点表达式：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291502578.png" alt="image-20200425105040237" tabindex="0" loading="lazy"><figcaption>image-20200425105040237</figcaption></figure><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">*</span>  *(..)  --&gt; 所有方法

<span class="token list punctuation">*</span> ---&gt; 修饰符 返回值
<span class="token list punctuation">*</span> ---&gt; 方法名
()---&gt; 参数表
..---&gt; 对于参数没有要求 (0个或多个)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>举例：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>  <span class="token title important"><span class="token punctuation">#</span> 定义login方法作为切入点</span>
  <span class="token list punctuation">*</span> login(..)
  
  <span class="token title important"><span class="token punctuation">#</span> 定义register作为切入点</span>
  <span class="token list punctuation">*</span> register(..)
  
  <span class="token title important"><span class="token punctuation">#</span> 定义名字为login且有两个字符串类型参数的方法 作为切入点</span>
  <span class="token list punctuation">*</span> login(String,String)
  
  <span class="token title important"><span class="token punctuation">#</span> 注意：非java.lang包中的类型，必须要写全限定名</span>
  <span class="token list punctuation">*</span> register(com.Leo.proxy.User)
  
  <span class="token title important"><span class="token punctuation">#</span> ..可以和具体的参数类型连用(至少有一个参数是String类型)</span>
  <span class="token list punctuation">*</span> login(String,..)
  
  <span class="token title important"><span class="token punctuation">#</span> 精准方法切入点限定</span>
  <span class="token title important"><span class="token punctuation">#</span> 修饰符 返回值    包.类.方法(参数)</span>
  
<span class="token code keyword">      *             com.yuziayn.proxy.UserServiceImpl.login(..)
      *             com.Leo.proxy.UserServiceImpl.login(String,String)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>类切入点表达式：</p><p>指定特定的类作为切入点，即这个类中所有的方法都会加上额外功能。</p><p>举例：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 类中的所有方法都加入额外功能 </span>
<span class="token list punctuation">*</span> com.Leo.proxy.UserServiceImpl.*(..)

<span class="token title important"><span class="token punctuation">#</span> 忽略包</span>
<span class="token title important"><span class="token punctuation">#</span> 1. 类只在一级包下  com.UserServiceImpl</span>
<span class="token list punctuation">*</span> <span class="token italic"><span class="token punctuation">*</span><span class="token content">.UserServiceImpl.</span><span class="token punctuation">*</span></span>(..)

<span class="token title important"><span class="token punctuation">#</span> 2. 类可在多级包下  com.Leo.proxy.UserServiceImpl</span>
<span class="token list punctuation">*</span> <span class="token italic"><span class="token punctuation">*</span><span class="token content">..UserServiceImpl.</span><span class="token punctuation">*</span></span>(..)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>包切入点表达式：</p><p>指定包作为切入点，即这个包中的所有类及其方法都会加入额外的功能。</p><p>举例：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> proxy包作为切入点，即proxy包下所有类中的所有方法都会加入额外功能，但是不包括其子包中的类！</span>
<span class="token list punctuation">*</span> com.Leo.proxy.<span class="token italic"><span class="token punctuation">*</span><span class="token content">.</span><span class="token punctuation">*</span></span>(..)

<span class="token title important"><span class="token punctuation">#</span> 当前包及其子包都生效</span>
<span class="token list punctuation">*</span> com.Leo.proxy..<span class="token italic"><span class="token punctuation">*</span><span class="token content">.</span><span class="token punctuation">*</span></span>(..) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-切入点函数" tabindex="-1"><a class="header-anchor" href="#_2-切入点函数" aria-hidden="true">#</a> 2 切入点函数</h4><p>作用：用于执行切入点表达式。</p><ol><li><p><code>execution()</code></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>最为重要的切入点函数，功能最全！
用于执行：方法切入点表达式、类切入点表达式、包切入点表达式 

弊端：execution执行切入点表达式 ，书写麻烦
     execution(<span class="token italic"><span class="token punctuation">*</span><span class="token content"> com.Leo.proxy..</span><span class="token punctuation">*</span></span>.*(..))
     
注意：其他的切入点函数 只是简化execution书写复杂度，功能上完全一致
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>args()</code></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 作用：用于函数(方法)参数的匹配</span>

<span class="token title important"><span class="token punctuation">#</span> 举例：方法参数必须得是2个字符串类型的参数</span>
	execution(<span class="token italic"><span class="token punctuation">*</span><span class="token content"> </span><span class="token punctuation">*</span></span>(String,String))
	等价于：
	args(String,String)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>within()</code></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 作用：用于进行类、包切入点表达式的匹配</span>
<span class="token title important"><span class="token punctuation">#</span> 举例：</span>
<span class="token title important"><span class="token punctuation">#</span> UserServiceImpl类作为切入点：</span>
	execution(<span class="token italic"><span class="token punctuation">*</span><span class="token content"> </span><span class="token punctuation">*</span></span>..UserServiceImpl.*(..))

<span class="token code keyword">	within(*..UserServiceImpl)</span>
<span class="token title important"><span class="token punctuation">#</span> proxy包作为切入点：</span>
	execution(<span class="token italic"><span class="token punctuation">*</span><span class="token content"> com.Leo.proxy..</span><span class="token punctuation">*</span></span>.<span class="token italic"><span class="token punctuation">*</span><span class="token content">(..))
	
	within(com.yuziayan.proxy..</span><span class="token punctuation">*</span></span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@annotation()</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 作用：为具有特殊注解的方法加入额外功能 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@annotation(com.baizhiedu.Log)<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>切入点函数间的逻辑运算：</p><p>目的：整合多个切入点函数一起配合工作，进而完成更为复杂的需求。</p><ul><li><p>and 与操作（同时满足）</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 案例：方法名为login，同时有2个字符串类型的参数：</span>
	execution(* login(String,String))

<span class="token code keyword">	execution(* login(..)) and args(String,String)</span>

<span class="token title important"><span class="token punctuation">#</span> 注意：与操作不能用于同种类型的切入点函数 </span>
<span class="token title important"><span class="token punctuation">#</span> 错误案例：register方法 和 login方法作为切入点（不能用and，而用or！）</span>
	execution(<span class="token italic"><span class="token punctuation">*</span><span class="token content"> login(..)) and execution(</span><span class="token punctuation">*</span></span> register(..))
<span class="token title important"><span class="token punctuation">#</span> 上面的语句会发生错误，因为其实际表达的含义是方法名为login同时方法名为register，显然有悖逻辑，此时应该用到的是 or</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><ul><li><p>or 或操作（满足一种即可）</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>   <span class="token title important"><span class="token punctuation">#</span> 案例：register方法 和 login方法作为切入点 </span>
   	execution(<span class="token italic"><span class="token punctuation">*</span><span class="token content"> login(..)) or  execution(</span><span class="token punctuation">*</span></span> register(..))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-aop编程" tabindex="-1"><a class="header-anchor" href="#_4-aop编程" aria-hidden="true">#</a> 4. AOP编程</h2><h3 id="_4-1-aop概念" tabindex="-1"><a class="header-anchor" href="#_4-1-aop概念" aria-hidden="true">#</a> 4.1 AOP概念</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> AOP (Aspect Oriented Programing)   面向切面编程 = Spring动态代理开发</span>
<span class="token title important"><span class="token punctuation">#</span> 以切面为基本单位的程序开发，通过切面间的彼此协同，相互调用，完成程序的构建</span>
<span class="token title important"><span class="token punctuation">#</span> 切面 = 切入点 + 额外功能</span>

<span class="token title important"><span class="token punctuation">#</span> OOP (Object Oriented Programing)   面向对象编程 Java</span>
<span class="token title important"><span class="token punctuation">#</span> 以对象为基本单位的程序开发，通过对象间的彼此协同，相互调用，完成程序的构建</span>

<span class="token title important"><span class="token punctuation">#</span> POP (Procedure Oriented Programing) 面向过程(方法、函数)编程 C </span>
<span class="token title important"><span class="token punctuation">#</span> 以过程为基本单位的程序开发，通过过程间的彼此协同，相互调用，完成程序的构建</span>

<span class="token title important"><span class="token punctuation">#</span> AOP的概念：</span>
     本质就是Spring的动态代理开发，通过代理类为原始类增加额外功能。
     好处：利于原始类的维护
<span class="token title important"><span class="token punctuation">#</span> 注意：AOP编程不可能取代OOP，而是OOP编程的补充。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-aop编程的开发步骤" tabindex="-1"><a class="header-anchor" href="#_4-2-aop编程的开发步骤" aria-hidden="true">#</a> 4.2 AOP编程的开发步骤</h3><ol><li>原始对象</li><li>额外功能 (MethodInterceptor)</li><li>切入点</li><li>组装切面 (额外功能+切入点)</li></ol><h3 id="_4-3-切面的名词解释" tabindex="-1"><a class="header-anchor" href="#_4-3-切面的名词解释" aria-hidden="true">#</a> 4.3 切面的名词解释</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>切面 = 切入点 + 额外功能 

几何学
   面 = 点 + 相同的性质
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291503173.png" alt="image-20230529150312064" tabindex="0" loading="lazy"><figcaption>image-20230529150312064</figcaption></figure><h2 id="_5-aop的底层实现原理" tabindex="-1"><a class="header-anchor" href="#_5-aop的底层实现原理" aria-hidden="true">#</a> 5. AOP的底层实现原理</h2><h3 id="_5-1-核心问题" tabindex="-1"><a class="header-anchor" href="#_5-1-核心问题" aria-hidden="true">#</a> 5.1 核心问题</h3><ul><li>AOP如何创建动态代理类？(动态字节码技术)</li><li>Spring工厂如何加工创建代理对象？通过原始对象的id值，获得的是代理对象。</li></ul><h3 id="_5-2-动态代理类的创建" tabindex="-1"><a class="header-anchor" href="#_5-2-动态代理类的创建" aria-hidden="true">#</a> 5.2 动态代理类的创建</h3><h4 id="_1-jdk的动态代理" tabindex="-1"><a class="header-anchor" href="#_1-jdk的动态代理" aria-hidden="true">#</a> 1. JDK的动态代理</h4><ul><li><p><code>Proxy.newProxyInstance()</code>方法参数详解:</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291502314.png" alt="image-20200428175248912" tabindex="0" loading="lazy"><figcaption>image-20200428175248912</figcaption></figure></li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291502410.png" alt="image-20200428175316276" tabindex="0" loading="lazy"><figcaption>image-20200428175316276</figcaption></figure><ul><li><p>编码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDKProxy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.创建原始对象</span>
        <span class="token comment">//注意：由于后面匿名子类的方法中用到了userService，所以应该用final修饰</span>
        <span class="token comment">//     而JDK1.8以后默认加了final，不需要手动加</span>
        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.JDK创建代理对象</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------- JDKProxy log -----------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\\
                <span class="token comment">//目标方法运行：</span>
                <span class="token class-name">Object</span> ret <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">UserService</span> userServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        userServiceProxy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&quot;Leo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userServiceProxy<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-cglib的动态代理" tabindex="-1"><a class="header-anchor" href="#_2-cglib的动态代理" aria-hidden="true">#</a> 2. CGlib的动态代理</h4><ul><li>原理：通过父子继承关系创建代理对象。原始类作为父类，代理类作为子类，这样既可以保证2者方法一致，同时在代理类中提供新的实现(额外功能+原始方法)</li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291502484.png" alt="image-20200429111709226" tabindex="0" loading="lazy"><figcaption>image-20200429111709226</figcaption></figure><ul><li><p>CGlib编码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Leo</span><span class="token punctuation">.</span>cglib<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCGlibProxy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.创建原始对象</span>
        <span class="token class-name">UserServiceImpl</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.通过CGlib创建代理对象</span>
        <span class="token comment">//  2.1 创建Enhancer</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  2.2 设置借用类加载器</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span><span class="token class-name">TestCGlibProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  2.3 设置父类（目标类）</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  2.4 设置回调，额外功能写在里面</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//相当于 InvocationHandler --&gt; invoke()</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                <span class="token comment">//额外功能：</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;========= CGlibProxy log ========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//目标方法执行：</span>
                <span class="token class-name">Object</span> ret <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  2.5 通过Enhancer对象创建代理</span>
        <span class="token class-name">UserServiceImpl</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//测试：</span>
        service<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> JDK动态代理   Proxy.newProxyInstance()  
<span class="token title important"><span class="token punctuation">#</span> 通过目标类实现的接口创建代理类 </span>
<span class="token list punctuation">2.</span> Cglib动态代理 Enhancer                  
<span class="token title important"><span class="token punctuation">#</span> 通过继承目标类创建代理类 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-spring工厂如何返回代理对象" tabindex="-1"><a class="header-anchor" href="#_5-3-spring工厂如何返回代理对象" aria-hidden="true">#</a> 5.3 Spring工厂如何返回代理对象</h3><ul><li>思路分析：</li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291503338.png" alt="image-20200430113353205" tabindex="0" loading="lazy"><figcaption>image-20200430113353205</figcaption></figure><ul><li><p>编码模拟：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">InvocationHandler</span> invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------- 模拟Spring返回代理对象的方式 log -----------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Object</span> ret <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ProxyBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!-- 1.配置原始对象 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.Leo.factory.UserServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 2.配置自己模拟的ProxyBeanPostProcessor --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>proxyBeanPostProcessor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.Leo.factory.ProxyBeanPostProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_6-基于注解的aop编程" tabindex="-1"><a class="header-anchor" href="#_6-基于注解的aop编程" aria-hidden="true">#</a> 6. 基于注解的AOP编程</h2><h3 id="_6-1-开发步骤" tabindex="-1"><a class="header-anchor" href="#_6-1-开发步骤" aria-hidden="true">#</a> 6.1 开发步骤：</h3><ol><li><p>原始对象</p></li><li><p>额外功能</p></li><li><p>切入点</p></li><li><p>组装切面</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 声明切面类     @Aspect
 * 定义额外功能   @Around
 * 定义切入点     @Around(&quot;execution(* login(..))&quot;)
 *
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* login(..))&quot;</span><span class="token punctuation">)</span><span class="token comment">//组装了切入点和额外功能</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">//额外功能：</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------- 基于注解的AOP编程 log --------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//原始方法执行：</span>
        <span class="token class-name">Object</span> ret <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- 原始对象 --&gt;</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.Leo.aspect.UserServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
   
   <span class="token comment">&lt;!-- 切面 --&gt;</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myAspect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.Leo.aspect.MyAspect<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
   
   <span class="token comment">&lt;!-- 开启基于注解的AOP编程 --&gt;</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_6-2-细节分析" tabindex="-1"><a class="header-anchor" href="#_6-2-细节分析" aria-hidden="true">#</a> 6.2 细节分析：</h3><ul><li><p>切入点复用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 切入点复用：定义一个函数，加上@Pointcut注解，通过该注解的value定义切入点表达式，以后可以复用。
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* login(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;myPointcut()&quot;</span><span class="token punctuation">)</span><span class="token comment">//组装了切入点和额外功能</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">//额外功能：</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------- 基于注解的AOP编程 log --------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//原始方法执行：</span>
        <span class="token class-name">Object</span> ret <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;myPointcut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around1</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">//额外功能：</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------- 基于注解的AOP编程 tx --------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//原始方法执行：</span>
        <span class="token class-name">Object</span> ret <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>动态代理的创建方式：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>AOP底层实现  2种代理创建方式
  <span class="token list punctuation">1.</span>  JDK   通过实现接口，创建代理对象
  <span class="token list punctuation">2.</span>  Cglib 通过继承目标类，创建代理对象
  
  默认情况 AOP编程 底层应用JDK动态代理创建方式 
  如果要切换Cglib
       <span class="token list punctuation">1.</span> 基于注解AOP开发
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
       <span class="token list punctuation">2.</span> 传统的AOP开发
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aop</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_7-aop开发中的一个坑" tabindex="-1"><a class="header-anchor" href="#_7-aop开发中的一个坑" aria-hidden="true">#</a> 7. AOP开发中的一个坑</h2><p>坑：在同一个业务类中，业务方法间相互调用时，只有最外层的方法,加入了额外功能(内部的方法，通过普通的方式调用，运行的都是原始方法)。如果想让内层的方法也调用代理对象的方法，就要实现AppicationContextAware获得工厂，进而获得代理对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> ctx<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Log</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserServiceImpl.register 业务运算 + DAO &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//throw new RuntimeException(&quot;测试异常&quot;);</span>

        <span class="token comment">//调用的是原始对象的login方法 ---&gt; 核心功能</span>
        <span class="token comment">/*
            设计目的：代理对象的login方法 ---&gt;  额外功能+核心功能
            ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;/applicationContext2.xml&quot;);
            UserService userService = (UserService) ctx.getBean(&quot;userService&quot;);
            userService.login();

            Spring工厂重量级资源 一个应用中 应该只创建一个工厂
         */</span>

        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&quot;Leo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserServiceImpl.login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-aop阶段知识总结" tabindex="-1"><a class="header-anchor" href="#_8-aop阶段知识总结" aria-hidden="true">#</a> 8. AOP阶段知识总结</h2><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308180944260.png" alt="AOP 总结" tabindex="0" loading="lazy"><figcaption>AOP 总结</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,107),c=[p];function i(o,l){return s(),a("div",null,c)}const d=n(t,[["render",i],["__file","Spring5-aop.html.vue"]]);export{d as default};
