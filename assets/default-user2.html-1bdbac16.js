import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as s,b as n,d as i,e as a}from"./app-8d307529.js";const l={},u=a('<h1 id="springsecurity6-默认用户生成-下" tabindex="-1"><a class="header-anchor" href="#springsecurity6-默认用户生成-下" aria-hidden="true">#</a> SpringSecurity6 | 默认用户生成(下)</h1><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070901718.png" alt="image-20231030235443828" tabindex="0" loading="lazy"><figcaption>image-20231030235443828</figcaption></figure><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h2>',3),r={href:"https://gaoziman.blog.csdn.net/article/details/134816835",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>好了，话不多说让我们开始吧😎😎😎。</p><h2 id="_2-问题" tabindex="-1"><a class="header-anchor" href="#_2-问题" aria-hidden="true">#</a> 2.问题</h2><p>我们在上一篇文章的时候，最后讲到了UserDetailedService，程序最后也是走到了UserDetailedService的<strong>loadUserByUsername()<strong>方法，然后基于内存对我们表单输入的用户名和密码进行判断，那这个</strong>UserDetailedService</strong></p><p>他是如何被SpringBoot加载出来的呢，我们且听后续分享。</p><h2 id="_3-揭晓" tabindex="-1"><a class="header-anchor" href="#_3-揭晓" aria-hidden="true">#</a> 3.揭晓</h2><h3 id="_3-1-userdetailservice接口" tabindex="-1"><a class="header-anchor" href="#_3-1-userdetailservice接口" aria-hidden="true">#</a> 3.1 UserDetailService接口</h3><p>在 UserDetailService 接口中，<strong>loadUserByUserName()</strong> 方法用于根据用户名进行认证，默认基于内存实现，不需要有后端数据库的支持。如果想修改成数据库实现，我们只需要自定义 UserDetailService 接口的实现类，并返回 UserDetails 实例即可：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070913105.png" alt="image-20231207091353077" tabindex="0" loading="lazy"><figcaption>image-20231207091353077</figcaption></figure><p>我们来看一下UserDetailService接口的继承结构图</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070915468.png" alt="image-20231207091537435" tabindex="0" loading="lazy"><figcaption>image-20231207091537435</figcaption></figure><p><strong>CachingUserDetailsService</strong> (位于org.springframework.security.authentication包下)缓存用户详细信息服务，是UserDetailsService 接口的实现之一，获取用户详细信息的源头可以是从缓存中获取,<br> 详细代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用户缓存</span>
    <span class="token keyword">private</span> <span class="token class-name">UserCache</span> userCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullUserCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取用户详情服务接口</span>
    <span class="token comment">// 以免从缓存中没有获取到用户信息</span>
    <span class="token comment">// 可以通过提供的其他方式获取用户信息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDetailsService</span> delegate<span class="token punctuation">;</span>

    <span class="token comment">// 构造器 初始化获取用户信息的其他服务</span>
    <span class="token keyword">public</span> <span class="token class-name">CachingUserDetailsService</span><span class="token punctuation">(</span><span class="token class-name">UserDetailsService</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     
    <span class="token comment">// 获取用户缓存</span>
    <span class="token keyword">public</span> <span class="token class-name">UserCache</span> <span class="token function">getUserCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设置用户缓存</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserCache</span><span class="token punctuation">(</span><span class="token class-name">UserCache</span> userCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userCache <span class="token operator">=</span> userCache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 通过用户名称获取用户详情信息</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 从缓存中获取</span>
        <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">getUserFromCache</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果从缓存中获取的用户信息为null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用其他方式获取用户信息</span>
            user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
       <span class="token comment">// 判断用户信息是否为空</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;UserDetailsService &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">+</span> <span class="token string">&quot; returned null for username &quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;. This is an interface contract violation&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不为空则向缓存中添加用户信息</span>
        <span class="token comment">// 下次可以从缓存中获取</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">putUserInCache</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回用户信息</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UserDetailsManager</strong>(位于org.springframework.security.provisioning包下)用户详情信息管理，这个接口不仅继承了UserDetailsService接口拥有通过用户名获取用户详情信息的方法，还定义了许多操作用户的相关方法，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetailsManager</span> <span class="token keyword">extends</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建用户</span>
    <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 修改用户</span>
    <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 删除用户</span>
    <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 修改密码</span>
    <span class="token keyword">void</span> <span class="token function">changePassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> oldPassword<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 用户是否存在</span>
    <span class="token keyword">boolean</span> <span class="token function">userExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>InMemoryUserDetailsManager</strong> (位于org.springframework.security.provisioning包下)内存用户详细信息管理器，这个类实现UserDetailsManager 接口不仅可以获取用户信息还有自己的一套用户信息管理发方式，将用户信息存在在Map中进行管理CIUD操作，虽然很是方便但是对用户数据没有做持久化操作，系统关机时用户信息都会消失；InMemoryUserDetailsManager 还实现了==UserDetailsPasswordService == (位于org.springframework.security.core.userdetails包下)接口用户详细信息密码服务，主要进行优化密码更新并返回用户信息方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetailsPasswordService</span> <span class="token punctuation">{</span>
   <span class="token comment">// 修改密码 返回用户详情</span>
    <span class="token class-name">UserDetails</span> <span class="token function">updatePassword</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InMemoryUserDetailsManager</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsManager</span><span class="token punctuation">,</span> <span class="token class-name">UserDetailsPasswordService</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用于管理用户信息的Map(可以理解为一个没有持久化功能的内存数据库)</span>
    <span class="token comment">// 感觉MutableUserDetails可变用户接口的实现主要为SpringSecurity内部</span>
    <span class="token comment">// 自己的用户管理方式提供存储用户信息的类</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MutableUserDetails</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 认证管理器</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 构造器  初始化用户信息 并添加到map中</span>
    <span class="token keyword">public</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDetails</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDetails</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
   
      <span class="token comment">// 构造器  初始化用户信息 并添加到map中</span>
    <span class="token keyword">public</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDetails</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> users<span class="token punctuation">;</span>
        <span class="token keyword">int</span> var3 <span class="token operator">=</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> var3<span class="token punctuation">;</span> <span class="token operator">++</span>var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    
      <span class="token comment">// 构造器  初始化用户信息 并添加到map中</span>
    <span class="token keyword">public</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserAttributeEditor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAttributeEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            editor<span class="token punctuation">.</span><span class="token function">setAsText</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">UserAttribute</span> attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserAttribute</span><span class="token punctuation">)</span>editor<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">&quot;The entry with username &#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;&#39; could not be converted to an UserDetails&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUserDetails</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">User</span> <span class="token function">createUserDetails</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">UserAttribute</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attr<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建用户并添加到map中</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">userExists</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;user should not exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MutableUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从map移除用户</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
    <span class="token comment">// 更新map中的用户信息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">userExists</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;user should exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MutableUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断用户是否以存在</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">userExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 修改密码</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changePassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> oldPassword<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 从认证上下文中获取认证后的用户信息</span>
        <span class="token class-name">Authentication</span> currentUser <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 无法更改密码，因为在当前用户的上下文中找不到身份验证对象</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t change password as no Authentication object found in context for current user.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取用户名称</span>
            <span class="token class-name">String</span> username <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Changing password for user &#39;%s&#39;&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Reauthenticating user &#39;%s&#39; for password change request.&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 认证用户信息，检查之前的用户信息</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> oldPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;No authentication manager set. Password won&#39;t be re-checked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 从map中获取用户信息</span>
            <span class="token class-name">MutableUserDetails</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MutableUserDetails</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Current user doesn&#39;t exist in database.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置新的密码</span>
            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 更新密码并返回用户详情信息</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">updatePassword</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MutableUserDetails</span> mutableUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MutableUserDetails</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mutableUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mutableUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 通过用户名称从map中获取用户详情信息</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDetails</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设置认证管理器</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthenticationManager</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager <span class="token operator">=</span> authenticationManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-userdetailserviceautoconfigutation类" tabindex="-1"><a class="header-anchor" href="#_3-2-userdetailserviceautoconfigutation类" aria-hidden="true">#</a> 3.2 UserDetailServiceAutoConfigutation类</h3><p>在 SpringBoot 的自动装配中，默认会启动配置类 <strong>UserDetailServiceAutoConfigutation</strong> ：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070922010.png" alt="1700842772209" tabindex="0" loading="lazy"><figcaption>1700842772209</figcaption></figure><p>在配置类 <strong>UserDetailServiceAutoConfigutation</strong> 默认生效时会提供 InMemoryUserDetailManager 的实例，也就是基于内存的实现。</p><blockquote><p>配置类 <strong>UserDetailServiceAutoConfigutation</strong> 默认生效的条件有三种情况：</p><ol><li>在 classpath 下存在 <strong>AuthenticationManager</strong> 类</li><li>当前应用中，存在 <strong>ObjectPostProcessor</strong> 类的实例时</li><li>当前应用中，不存在 <strong>AuthenticationManager</strong>.class、 <strong>AuthenticationProvider</strong>.class、<strong>UserDetailsService</strong>.class、 <strong>AuthenticationManagerResolver</strong>.class 的实例时</li></ol></blockquote><p>我们接着去看看 <strong>UserDetailServiceAutoConfigutation</strong>这个类的具体实现</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070923332.png" alt="image-20231207092338286" tabindex="0" loading="lazy"><figcaption>image-20231207092338286</figcaption></figure><p>我们来看看@ConditionalOnMissingBean这个注解，他是核心。</p><p><strong>@ConditionalOnMissingBean</strong>是一个注解函数，用于在SpringSecurity中条件地检查是否缺少指定类型的bean。如果缺少指定类型的bean，则会执行一些特定的操作。在此例中，如果缺少AuthenticationManager、AuthenticationProvider、UserDetailsService、AuthenticationManagerResolver类型的bean，以及JwtDecoder、OpaqueTokenIntrospector、ClientRegistrationRepository、RelyingPartyRegistrationRepository类型的bean，将会执行相应的操作。</p><p>我们这里的表单验证，并没有对UserDeatilService这个接口进行实现，并没有对以上bean进行激活，所以他就是直接走了默认的配置。</p><h2 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4.小结</h2><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070928418.png" alt="1700845195593" tabindex="0" loading="lazy"><figcaption>1700845195593</figcaption></figure><p>我们可以通过自定义 <strong>UserDetailService</strong> 接口的实现类，可以修改默认认证规则。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5.总结</h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312070929403.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,33);function d(m,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("大家好，我是Leo哥🫣🫣🫣，接到"),s("a",r,[n("上一节"),i(t)]),n("，我们学习了SpringSecurity默认登录用户是如何来的，也通过源码的方式去验证了我们的猜想。那么本篇文章继续讲解有关最后UserDetailedService这个接口的相关内容。")]),k])}const h=e(l,[["render",d],["__file","default-user2.html.vue"]]);export{h as default};
