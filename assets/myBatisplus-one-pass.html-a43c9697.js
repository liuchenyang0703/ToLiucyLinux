import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a as n,b as s,d as e,e as t}from"./app-8d307529.js";const l={},u=t('<blockquote><p>大家好，我是Leo😀，之前自学那会有简单了解过MyBatisPlus相关文档，但是随着时间长不用，一些api以及配置都忘了，想翻笔记发现当时的自己只是囫囵吞枣的学习了，任何学习记录都没有留下来，😅😅😅，所以大家可千万不要学我哈！ 这不最近打算重新学习一下MyBatisPlus（下文简称MP），这里也是写篇博客来整理一下相关知识点，与君共勉🫡🫡🫡！</p></blockquote><p>话不多说，我们先来看一张简单的思维导图，了解一下MP的主要核心功能，脑图在手，思路我有，开干🤔！</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311130935.png" alt="image-20230831113008757" tabindex="0" loading="lazy"><figcaption>image-20230831113008757</figcaption></figure><h2 id="_1-快速开始" tabindex="-1"><a class="header-anchor" href="#_1-快速开始" aria-hidden="true">#</a> 1. 快速开始</h2><h3 id="_1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-介绍" aria-hidden="true">#</a> 1.1 介绍</h3><p>在快速开始我们入门Demo之前，我来首先简单介绍一下 <strong>MP</strong></p>',6),r={href:"https://baomidou.com/",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),k=n("code",null,"MyBatis-Plus",-1),m=t(`<blockquote><p>愿景：<br> 我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311139334.png" alt="image-20230831113906219" tabindex="0" loading="lazy"><figcaption>image-20230831113906219</figcaption></figure><p><strong>特性：</strong></p><ol><li><p>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</p></li><li><p>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p></li><li><p>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分</p><p>CRUD 操作，更有强大的条件构造器，满足各类使用需求</p></li><li><p>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</p></li><li><p>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</p></li><li><p>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</p></li><li><p>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</p></li><li><p>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</p></li><li><p>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</p></li><li><p>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</p></li><li><p>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</p></li><li><p>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操</p></li></ol><h3 id="_1-2-框架设计" tabindex="-1"><a class="header-anchor" href="#_1-2-框架设计" aria-hidden="true">#</a> 1.2 框架设计</h3><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311143114.png" alt="image-20230831114321021" tabindex="0" loading="lazy"><figcaption>image-20230831114321021</figcaption></figure><h3 id="_1-3-快速入门mp" tabindex="-1"><a class="header-anchor" href="#_1-3-快速入门mp" aria-hidden="true">#</a> 1.3 快速入门MP</h3><p><strong>我们将通过一个简单的 Demo 来阐述 MyBatis-Plus 的强大功能，在此之前，你需要学会：</strong></p><ul><li>Java 开发环境以及相应 IDE</li><li>熟悉 Spring Boot</li><li>熟悉 Maven</li></ul><h4 id="_1-创建表结构" tabindex="-1"><a class="header-anchor" href="#_1-创建表结构" aria-hidden="true">#</a> 1. 创建表结构</h4><p>现有一张 <code>User</code> 表，其表结构如下：</p><table><thead><tr><th style="text-align:center;">id</th><th style="text-align:center;">name</th><th style="text-align:center;">age</th><th style="text-align:center;">emial</th><th style="text-align:center;">address</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">admin</td><td style="text-align:center;">20</td><td style="text-align:center;"><a href="mailto:admin@qq.com">admin@qq.com</a></td><td style="text-align:center;">湖北武汉</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">test</td><td style="text-align:center;">20</td><td style="text-align:center;"><a href="mailto:test@qq.com">test@qq.com</a></td><td style="text-align:center;">安徽合肥</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">zhangsan</td><td style="text-align:center;">17</td><td style="text-align:center;"><a href="mailto:zhangsan@qq.com">zhangsan@qq.com</a></td><td style="text-align:center;">北京海淀</td></tr></tbody></table><p>其对应的数据库 Schema 脚本如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">5</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的数据库 Data 脚本如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email，address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;test1@admin.com&#39;</span>，<span class="token string">&#39;湖北武汉&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;test2@test.com&#39;</span>，<span class="token string">&#39;湖北武汉&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&#39;test4@zhangsan.com&#39;</span>，<span class="token string">&#39;湖北武汉&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-创建springboot工程" tabindex="-1"><a class="header-anchor" href="#_2-创建springboot工程" aria-hidden="true">#</a> 2. 创建SpringBoot工程</h4><p>本次教程会以<code>Maven</code>工程创建修改为<code>SpringBoot</code>工程。</p><p>我这里是在父工程下面创建许多子模块，这样就不需要每一个新的demo都需要去创建一个新的工程了，也方便Demo项目统一管理。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311159740.png" alt="image-20230831115942637" tabindex="0" loading="lazy"><figcaption>image-20230831115942637</figcaption></figure><h4 id="_3-添加依赖" tabindex="-1"><a class="header-anchor" href="#_3-添加依赖" aria-hidden="true">#</a> 3. 添加依赖</h4><p>引入 SpringBoot Starter 父工程：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入 <code>spring-boot-starter</code>、<code>spring-boot-starter-test</code>、<code>mybatis-plus-boot-starter</code>、MySQL依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--spring-boot--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--SpringBootTest--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--lombok--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--mysql 驱动--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--mybatis-plus--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-配置" tabindex="-1"><a class="header-anchor" href="#_4-配置" aria-hidden="true">#</a> 4. 配置</h4><p>在 <code>application.yml</code> 配置文件中添加 MySQL数据库的相关配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8800</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss
    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>serverTimezone=GMT%2B8<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-8&amp;allowPublicKeyRetrieval=true</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl <span class="token comment"># 查看日志</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Leo</span><span class="token punctuation">.</span>mp<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Environment</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023/8/31 13:26
 * <span class="token keyword">@description</span> : 启动类
 */</span>
<span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.Leo.mp.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Environment</span> environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;访问链接：http://localhost:&quot;</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;(♥◠‿◠)ﾉﾞ  项目启动成功   ლ(´ڡ\`ლ)ﾞ  \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; .-------.       ____     __        \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; |  _ _   \\\\      \\\\   \\\\   /  /    \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; | ( &#39; )  |       \\\\  _. /  &#39;       \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; |(_ o _) /        _( )_ .&#39;         \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; | (_,_).&#39; __  ___(_ o _)&#39;          \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; |  |\\\\ \\\\  |  ||   |(_,_)&#39;         \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; |  | \\\\ \`&#39;   /|   \`-&#39;  /           \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; |  |  \\\\    /  \\\\      /           \\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot; &#39;&#39;-&#39;   \`&#39;-&#39;    \`-..-&#39;              &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-编码" tabindex="-1"><a class="header-anchor" href="#_5-编码" aria-hidden="true">#</a> 5. 编码</h4>`,31),v=n("code",null,"User.java",-1),g={href:"https://www.projectlombok.org/",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Leo</span><span class="token punctuation">.</span>mp<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023/8/31 13:32
 * <span class="token keyword">@description</span> : User实体类
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 Mapper 包下的 <code>UserMapper</code>接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023/8/31 13:33
 * <span class="token keyword">@description</span> :
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-测试" tabindex="-1"><a class="header-anchor" href="#_6-测试" aria-hidden="true">#</a> 6. 测试</h4><p>以上工作都做完就可以开始进行<strong>功能测试</strong>了</p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>package com.Leo.mp.controller;

import com.Leo.mp.mapper.UserMapper;
import com.Leo.mp.pojo.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * @author : Leo
 * @version 1.0
 * @date 2023/8/31 13:43
 * @description :
 */
@RestController
public class UserController
{

    @Autowired
    private UserMapper userMapper;

    @GetMapping(&quot;/list&quot;)
    public List&lt;User&gt; userList()
    {
        return userMapper.selectList(null);
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示</p><p>UserMapper 中的 <code>selectList()</code> 方法的参数为 MP 内置的条件封装器 <code>Wrapper</code>，所以不填写就是无任何条件</p></blockquote><p>启动项目，打开浏览器</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311345854.png" alt="image-20230831134539746" tabindex="0" loading="lazy"><figcaption>image-20230831134539746</figcaption></figure><h4 id="_7-小结" tabindex="-1"><a class="header-anchor" href="#_7-小结" aria-hidden="true">#</a> 7. 小结</h4><p>通过以上几个简单的步骤，我们就实现了 User 表的 <code>查询</code> 功能，甚至连 XML 文件都不用编写！</p><p>从以上步骤中，我们可以看到集成<code>MyBatis-Plus</code>非常的简单，只需要引入 starter 工程，并配置 mapper 扫描路径即可。</p><p>但 <code>MP</code> 的强大远不止这些功能，想要详细了解 那就继续往下看吧！</p><h2 id="_2-常见注解" tabindex="-1"><a class="header-anchor" href="#_2-常见注解" aria-hidden="true">#</a> 2. 常见注解</h2><p>本文将介绍 <code>MybatisPlus</code> 注解包相关类详解（更多详细描述可点击查看源码注释）</p><h3 id="_2-1-tablename" tabindex="-1"><a class="header-anchor" href="#_2-1-tablename" aria-hidden="true">#</a> 2.1 @TableName</h3><ul><li>描述：表名注解，标识实体类对应的表, 通俗来说就是让<strong>数据库表名和实体类一一对应</strong></li><li>使用位置：<code>实体类</code></li></ul><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>@TableName(&quot;user&quot;)
public class User {
    private Long id;
    private String  name;
    private Integer age;
    private String  email;
    private String  address;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311349329.png" alt="image-20230831134901251" tabindex="0" loading="lazy"><figcaption>image-20230831134901251</figcaption></figure><p><strong>关于 <code>autoResultMap</code> 的说明：</strong></p><p>MP 会自动构建一个 <code>resultMap</code> 并注入到 MyBatis 里（一般用不上），请注意以下内容：</p><p>因为 MP 底层是 MyBatis，所以 MP 只是帮您注入了常用 CRUD 到 MyBatis 里，注入之前是动态的（根据您的 <code>实体类字段</code>以及注解变化而变化），但是注入之后是静态的（等于 <code>XML</code> 配置中的内容）。</p><h3 id="_2-2-tableid" tabindex="-1"><a class="header-anchor" href="#_2-2-tableid" aria-hidden="true">#</a> 2.2 @TableId</h3><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>public class User {
    @TableId
    private Long id;
    private String  name;
    private Integer age;
    private String  email;
    private String  address;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311414821.png" alt="image-20230831141456740" tabindex="0" loading="lazy"><figcaption>image-20230831141456740</figcaption></figure><p><strong>IdType</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311352575.png" alt="image-20230831135246510" tabindex="0" loading="lazy"><figcaption>image-20230831135246510</figcaption></figure><h3 id="_2-3-tablefield" tabindex="-1"><a class="header-anchor" href="#_2-3-tablefield" aria-hidden="true">#</a> 2.3 @TableField</h3><ul><li>描述：<strong>字段注解</strong>（非主键）</li></ul><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>public class User {
    private Long id;
    @TableField(&quot;username&quot;)
    private String  name;
    private Integer age;
    private String  email;
    private String  address;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过<strong>Ctrl + 鼠标左键</strong>点进去看看</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311400413.png" alt="image-20230831140046119" tabindex="0" loading="lazy"><figcaption>image-20230831140046119</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311359990.png" alt="image-20230831135918882" tabindex="0" loading="lazy"><figcaption>image-20230831135918882</figcaption></figure><h3 id="_2-4-fieldfill" tabindex="-1"><a class="header-anchor" href="#_2-4-fieldfill" aria-hidden="true">#</a> 2.4 FieldFill</h3><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311401931.png" alt="image-20230831140158881" tabindex="0" loading="lazy"><figcaption>image-20230831140158881</figcaption></figure><h3 id="_2-5-乐观锁" tabindex="-1"><a class="header-anchor" href="#_2-5-乐观锁" aria-hidden="true">#</a> 2.5 乐观锁</h3><blockquote><p>描述：乐观锁注解、标记 <code>@Version</code> 在字段</p></blockquote><h3 id="_2-6-tablelogic" tabindex="-1"><a class="header-anchor" href="#_2-6-tablelogic" aria-hidden="true">#</a> 2.6 @TableLogic</h3><blockquote><p>描述：表字段逻辑处理注解（逻辑删除）</p></blockquote><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311403776.png" alt="image-20230831140301725" tabindex="0" loading="lazy"><figcaption>image-20230831140301725</figcaption></figure><h3 id="_2-7-orderby" tabindex="-1"><a class="header-anchor" href="#_2-7-orderby" aria-hidden="true">#</a> 2.7 @OrderBy</h3><blockquote><p>描述：内置 SQL 默认指定排序，优先级低于 wrapper 条件查询</p></blockquote><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311403898.png" alt="image-20230831140357839" tabindex="0" loading="lazy"><figcaption>image-20230831140357839</figcaption></figure><h2 id="_3-核心功能" tabindex="-1"><a class="header-anchor" href="#_3-核心功能" aria-hidden="true">#</a> 3. 核心功能</h2><h3 id="_3-1-主键策略" tabindex="-1"><a class="header-anchor" href="#_3-1-主键策略" aria-hidden="true">#</a> 3.1 主键策略</h3><p><code>MP</code>默认实现5种主键生成策略，分别是：</p><ul><li><strong>AUTO</strong> ： 配合数据库设置自增主键，可以实现主键的自动增长，类型为 <code>nmber</code>。</li><li><strong>INPUT</strong> ： 由用户输入。</li><li><strong>NONE</strong> ： 不设置，等同于<code>INPUT</code> 。</li><li><strong>ASSIGN_ID</strong> ：只有当用户未输入时，采用雪花算法生成一个适用于分布式环境的全局唯一主键，类型可以是<code>String</code>和<code>number</code>。</li><li><strong>ASSIGN_UUID</strong> ：只有当用户未输入时，生成一个String类型的主键，但不保证全局唯一。</li></ul><p><code>IdType</code>默认的全局设置为IdType.ASSIGN_ID,即由mybatis-plus主动分配主键，默认情况下由默认主键生成器实现类DefaultIdentifierGenerator采用雪花算法填充主键。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DbConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>idType <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableUnderline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>capitalMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>logicDeleteValue <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>logicNotDeleteValue <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>insertStrategy <span class="token operator">=</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span><span class="token constant">NOT_NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updateStrategy <span class="token operator">=</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span><span class="token constant">NOT_NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>whereStrategy <span class="token operator">=</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span><span class="token constant">NOT_NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>SpringBoot</code>中，可以通过如下配置更改全局配置。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> assign_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-条件构造器" tabindex="-1"><a class="header-anchor" href="#_3-2-条件构造器" aria-hidden="true">#</a> 3.2 条件构造器</h3><blockquote><p>说明:</p><ul><li>以下出现的第一个入参<code>boolean condition</code>表示该条件<strong>是否</strong>加入最后生成的sql中，例如：query.like(StringUtils.isNotBlank(name), Entity::getName, name) .eq(age!=null &amp;&amp; age &gt;= 0, Entity::getAge, age)</li><li>以下代码块内的多个方法均为从上往下补全个别<code>boolean</code>类型的入参,默认为<code>true</code></li><li>以下出现的泛型<code>Param</code>均为<code>Wrapper</code>的子类实例(均具有<code>AbstractWrapper</code>的所有方法)</li><li>以下方法在入参中出现的<code>R</code>为泛型,在普通wrapper中是<code>String</code>,在<code>LambdaWrapper</code>中是 函数 (例:<code>Entity::getId</code>,<code>Entity</code>为实体类,<code>getId</code>为字段<code>id</code>的 getter Method )</li><li>以下方法入参中的<code>R column</code>均表示数据库字段,当<code>R</code>具体类型为<code>String</code>时则为数据库字段名( 字段名是数据库关键字的自己用转义符包裹 )!而不是实体类数据字段名!!!,另当<code>R</code>具体类型为<code>SFunction</code>时项目runtime不支持eclipse自家的编译器!!!</li></ul></blockquote><p>下面看一图来简单了解一下<code>Wrapper</code>的结构</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311432734.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-wrapper" tabindex="-1"><a class="header-anchor" href="#_1-wrapper" aria-hidden="true">#</a> 1. Wrapper</h4><p>条件构造抽象类，最顶端父类，抽象类中提供3个方法以及其他方法</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311434983.png" alt="image-20230831143422871" tabindex="0" loading="lazy"><figcaption>image-20230831143422871</figcaption></figure><h4 id="_2-abstractwrapper" tabindex="-1"><a class="header-anchor" href="#_2-abstractwrapper" aria-hidden="true">#</a> 2. AbstractWrapper</h4><blockquote><p>用于查询条件封装，生成 sql 的 where 条件,QueryWrapper(LambdaQueryWrapper) 和UpdateWrapper(LambdaUpdateWrapper) 的父类用于生成 sql 的 where 条件, entity 属性也用于生成 sql 的 where条件</p></blockquote><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311435680.png" alt="image-20230831143514543" tabindex="0" loading="lazy"><figcaption>image-20230831143514543</figcaption></figure><p>这里列举一下他的重要方法</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311435421.png" alt="image-20230831143553299" tabindex="0" loading="lazy"><figcaption>image-20230831143553299</figcaption></figure><h4 id="_3-abstractlambdawrapper" tabindex="-1"><a class="header-anchor" href="#_3-abstractlambdawrapper" aria-hidden="true">#</a> 3. AbstractLambdaWrapper</h4><blockquote><p>Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</p></blockquote><h4 id="_4-lambdaquerywrapper" tabindex="-1"><a class="header-anchor" href="#_4-lambdaquerywrapper" aria-hidden="true">#</a> 4. LambdaQueryWrapper</h4><blockquote><p>用于Lambda语法使用的查询Wrapper</p></blockquote><h4 id="_5-lambdaupdatewrapper" tabindex="-1"><a class="header-anchor" href="#_5-lambdaupdatewrapper" aria-hidden="true">#</a> 5. LambdaUpdateWrapper</h4><blockquote><p>Lambda 更新封装Wrapper</p></blockquote><h4 id="_6-querywrapper" tabindex="-1"><a class="header-anchor" href="#_6-querywrapper" aria-hidden="true">#</a> 6. QueryWrapper</h4><blockquote><p>实体类 对象封装操作类，不是用lambda语法,自身的内部属性 实体类 也用于生成 where 条件</p></blockquote><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311437171.png" alt="image-20230831143717067" tabindex="0" loading="lazy"><figcaption>image-20230831143717067</figcaption></figure><h4 id="_7-updatewrapper" tabindex="-1"><a class="header-anchor" href="#_7-updatewrapper" aria-hidden="true">#</a> 7. UpdateWrapper</h4><blockquote><p>说明:</p><p>继承自 <code>AbstractWrapper</code> ,自身的内部属性 <code>entity</code> 也用于生成 where 条件<br> 及 <code>LambdaUpdateWrapper</code>, 可以通过 <code>new UpdateWrapper().lambda()</code> 方法获取!</p></blockquote><h5 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SQL SET 字段</li><li>例: <code>set(&quot;name&quot;, &quot;Leo&quot;)</code></li><li>例: <code>set(&quot;name&quot;, &quot;&quot;)</code>---&gt;数据库字段值变为<strong>空字符串</strong></li><li>例: <code>set(&quot;name&quot;, null)</code>---&gt;数据库字段值变为<code>null</code></li></ul><h5 id="setsql" tabindex="-1"><a class="header-anchor" href="#setsql" aria-hidden="true">#</a> setSql</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置 SET 部分 SQL</li><li>例: <code>setSql(&quot;name = &#39;Leo&#39;&quot;)</code></li></ul><h5 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> lambda</h5><ul><li>获取 <code>LambdaWrapper</code><br> 在<code>QueryWrapper</code>中是获取<code>LambdaQueryWrapper</code><br> 在<code>UpdateWrapper</code>中是获取<code>LambdaUpdateWrapper</code></li></ul><h3 id="_3-3-crud接口" tabindex="-1"><a class="header-anchor" href="#_3-3-crud接口" aria-hidden="true">#</a> 3.3 CRUD接口</h3><h4 id="_1-带条件查询" tabindex="-1"><a class="header-anchor" href="#_1-带条件查询" aria-hidden="true">#</a> 1. 带条件查询</h4><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>// 根据 entity 条件，查询一条记录
T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
// 根据 entity 条件，查询全部记录
List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
// 根据 Wrapper 条件，查询全部记录
List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值
List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
// 根据 entity 条件，查询全部记录
IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
// 根据 Wrapper 条件，查询全部记录
IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
// 根据 Wrapper 条件，查询总记录数
Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-带条件更新" tabindex="-1"><a class="header-anchor" href="#_2-带条件更新" aria-hidden="true">#</a> 2. 带条件更新</h4><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>	UpdateWrapper&lt;Student&gt; updateWrapper = new UpdateWrapper&lt;Student&gt;();
	updateWrapper.eq(&quot;name&quot;, &quot;Leo&quot;).eq(&quot;age&quot;, 18).set(&quot;id&quot;, 100);
	empolyeeMapper.update(student, updateWrapper);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-带条件删除" tabindex="-1"><a class="header-anchor" href="#_3-带条件删除" aria-hidden="true">#</a> 3. 带条件删除</h4><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>// 根据 entity 条件，删除记录
int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);
// 根据 columnMap 条件，删除记录
int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-实战案例" tabindex="-1"><a class="header-anchor" href="#_4-实战案例" aria-hidden="true">#</a> 4. 实战案例</h4><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>package com.Leo.mp;

import com.Leo.mp.mapper.UserMapper;
import com.Leo.mp.pojo.User;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;
import java.util.Map;

/**
 * @author : Leo
 * @version 1.0
 * @date 2023/8/31 13:36
 * @description :
 */
@SpringBootTest
public class MpTest {

    @Autowired
    private UserMapper userMapper;

    @Test
    public void testSelect() {
        List&lt;User&gt; userList = userMapper.selectList(null);
        userList.forEach(System.out::println);
    }

    @Test
    void test1() {
        // 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于17
        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;()
                .isNotNull(&quot;name&quot;)
                .ge(&quot;age&quot;,17);
        userMapper.selectList(wrapper).forEach(System.out::println);
    }

    @Test
    void test2(){
        // 查询名字admin
        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;()
                .eq(&quot;name&quot;,&quot;admin&quot;);
        User user = userMapper.selectOne(wrapper); // 查询一个数据，出现多个结果使用List 或者 Map
        System.out.println(user);
    }

    @Test
    void test3(){
        // 查询年龄在 20 ~ 30 岁之间的用户
        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();
        wrapper.between(&quot;age&quot;,20,30); // 区间
        Long count = userMapper.selectCount(wrapper);// 查询结果数
        System.out.println(count);
    }

    // 模糊查询
    @Test
    void test4(){
        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;()
        // 左和右  t%
                .notLike(&quot;name&quot;,&quot;ad&quot;)
                .likeRight(&quot;email&quot;,&quot;@qq.com&quot;);
        List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);
        maps.forEach(System.out::println);
    }

    // 模糊查询
    @Test
    void test5(){

        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();
        // id 在子查询中查出来
        wrapper.inSql(&quot;id&quot;,&quot;select id from student where id&lt;3&quot;);

        List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);
        objects.forEach(System.out::println);
    }

    //测试六
    @Test
    void test6(){
        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();
        // 通过id进行排序
        wrapper.orderByAsc(&quot;id&quot;);
        List&lt;User&gt; users = userMapper.selectList(wrapper);
        users.forEach(System.out::println);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-代码生成器" tabindex="-1"><a class="header-anchor" href="#_3-4-代码生成器" aria-hidden="true">#</a> 3.4 代码生成器</h3><p>对于单表的操作，虽然MP大大简化了操作，但是每次都需要我们重新创建文件，从mapper到controller，那将会带来太大的工作量。</p><p>于是我们选择使用MP为我们带来的新版生成器，一劳永逸🥳</p><blockquote><p>注意</p><p>适用版本：mybatis-plus-generator 3.5.1 及其以上版本，对历史版本不兼容！</p></blockquote><p>目前支持两套生成的方式,一套使用SQL查询的方式是兼容旧的代码生成器核心逻辑使用,另一套使用驱动规范来读取元数据的方式,默认的使用元数据查询方式来生成代码</p><h4 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h4><p><strong>导入依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--mybatis-plus-generator 生成器--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--velocity--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--以下两个引擎模板保留一个即可，看个人爱好选择--&gt;</span>
        <span class="token comment">&lt;!--freemarker引擎模板--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--beetl引擎模板--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.ibeetl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>beetl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>快速生成</strong></p><blockquote><p>这里我已经根据官网配置生成好了一个通用的MP工具类，大家可以直接拿来用，所见即所得。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cisyam<span class="token punctuation">.</span>code<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">FieldFill</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span></span><span class="token class-name">FastAutoGenerator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">OutputFile</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">DateType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">NamingStrategy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">FreemarkerTemplateEngine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">VelocityTemplateEngine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>fill<span class="token punctuation">.</span></span><span class="token class-name">Column</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : gaoziman
 * <span class="token keyword">@description</span> : MP 代码生成器
 * <span class="token keyword">@date</span> 2023/7/19 20:01
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//这里按着给的注解修改参数即可</span>

        <span class="token comment">//手动配置数据源</span>

        <span class="token comment">//注意修改数据库名</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//数据库表的设置</span>

        <span class="token comment">//设置需要自动代码生成的表名</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listTable <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置 过滤 表的后缀</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listTableSuffix <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;_b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置 过滤 表的后缀</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listTablePrefix <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;t_&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//基本信息</span>
        <span class="token class-name">String</span> author <span class="token operator">=</span> <span class="token string">&quot;gaoziman&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//作者</span>
        <span class="token class-name">String</span> parent <span class="token operator">=</span> <span class="token string">&quot;com.cisyam&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//父包名</span>
        <span class="token class-name">String</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//模块包名</span>


        <span class="token comment">//已封装好，无需更改。可按照需求进行注释</span>

        <span class="token comment">//1、配置数据源</span>
        <span class="token class-name">FastAutoGenerator</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
                <span class="token comment">//2、全局配置</span>
                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    builder<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token comment">// 设置作者名</span>
                            <span class="token punctuation">.</span><span class="token function">outputDir</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.dir&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/src/main/java&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//设置输出路径：项目的 java 目录下【System.getProperty(&quot;user.dir&quot;)意思是获取到项目所在的绝对路径】</span>
                            <span class="token punctuation">.</span><span class="token function">commentDate</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//注释日期</span>
                            <span class="token punctuation">.</span><span class="token function">dateType</span><span class="token punctuation">(</span><span class="token class-name">DateType</span><span class="token punctuation">.</span><span class="token constant">ONLY_DATE</span><span class="token punctuation">)</span>   <span class="token comment">//定义生成的实体类中日期的类型 TIME_PACK=LocalDateTime;ONLY_DATE=Date;</span>
                            <span class="token punctuation">.</span><span class="token function">fileOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//覆盖之前的文件</span>
                            <span class="token punctuation">.</span><span class="token function">enableSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//开启 swagger 模式</span>
                            <span class="token punctuation">.</span><span class="token function">disableOpenDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//禁止打开输出目录，默认打开</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">//3、包配置</span>
                <span class="token punctuation">.</span><span class="token function">packageConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    builder<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token comment">// 设置父包名</span>
                            <span class="token punctuation">.</span><span class="token function">moduleName</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span>   <span class="token comment">//设置模块包名</span>
                            <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">&quot;pojo&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//pojo 实体类包名</span>
                            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token string">&quot;service&quot;</span><span class="token punctuation">)</span> <span class="token comment">//Service 包名</span>
                            <span class="token punctuation">.</span><span class="token function">serviceImpl</span><span class="token punctuation">(</span><span class="token string">&quot;service.impl&quot;</span><span class="token punctuation">)</span> <span class="token comment">// ***ServiceImpl 包名</span>
                            <span class="token punctuation">.</span><span class="token function">mapper</span><span class="token punctuation">(</span><span class="token string">&quot;mapper&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//Mapper 包名</span>
                            <span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token string">&quot;mapper.xml&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//Mapper XML 包名</span>
                            <span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">&quot;controller&quot;</span><span class="token punctuation">)</span> <span class="token comment">//Controller 包名</span>
                            <span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span>    <span class="token comment">//自定义包名(一般不在这里生成，而是后面编写的时候自己建包）</span>
                            <span class="token punctuation">.</span><span class="token function">pathInfo</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token class-name">OutputFile</span> <span class="token punctuation">.</span>xml<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.dir&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/src/main/resources/mapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配置 mapper.xml 路径信息：项目的 resources 目录下</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">//4、策略配置</span>
                <span class="token punctuation">.</span><span class="token function">strategyConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    builder
                            <span class="token punctuation">.</span><span class="token function">enableCapitalMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//开启大写命名</span>
                            <span class="token punctuation">.</span><span class="token function">enableSkipView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//创建实体类的时候跳过视图</span>
                            <span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span>listTable<span class="token punctuation">)</span> <span class="token comment">// 设置需要生成的数据表名</span>
                            <span class="token punctuation">.</span><span class="token function">addTableSuffix</span><span class="token punctuation">(</span>listTableSuffix<span class="token punctuation">)</span> <span class="token comment">//设置 过滤 表的后缀</span>
                            <span class="token punctuation">.</span><span class="token function">addTablePrefix</span><span class="token punctuation">(</span>listTablePrefix<span class="token punctuation">)</span> <span class="token comment">// 设置 过滤 表的前缀</span>

                            <span class="token comment">//4.1、实体类策略配置</span>
                            <span class="token punctuation">.</span><span class="token function">entityBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">enableChainModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//开启链式模型</span>
                            <span class="token comment">//.disableSerialVersionUID()  //默认是开启实体类序列化，可以手动disable使它不序列化。由于项目中需要使用序列化就按照默认开启了</span>
                            <span class="token punctuation">.</span><span class="token function">enableTableFieldAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 开启生成实体时生成字段注解</span>
                            <span class="token punctuation">.</span><span class="token function">enableLombok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//开启 Lombok</span>
                            <span class="token punctuation">.</span><span class="token function">versionColumnName</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//乐观锁字段名(数据库)</span>
                            <span class="token punctuation">.</span><span class="token function">versionPropertyName</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span> <span class="token comment">//乐观锁属性名(实体)</span>
                            <span class="token punctuation">.</span><span class="token function">logicDeleteColumnName</span><span class="token punctuation">(</span><span class="token string">&quot;deleted&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//逻辑删除字段名(数据库)</span>
                            <span class="token punctuation">.</span><span class="token function">logicDeletePropertyName</span><span class="token punctuation">(</span><span class="token string">&quot;deleteFlag&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//逻辑删除属性名(实体)</span>
                            <span class="token punctuation">.</span><span class="token function">naming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span>  <span class="token comment">//数据库表映射到实体的命名策略：默认是下划线转驼峰命。这里可以不设置</span>
                            <span class="token punctuation">.</span><span class="token function">columnNaming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span>    <span class="token comment">//数据库表字段映射到实体的命名策略：下划线转驼峰命。（默认是和naming一致，所以也可以不设置）</span>
                            <span class="token punctuation">.</span><span class="token function">addTableFills</span><span class="token punctuation">(</span>
                                    <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">&quot;create_time&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">&quot;modify_time&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>
                            <span class="token punctuation">)</span>   <span class="token comment">//添加表字段填充，&quot;create_time&quot;字段自动填充为插入时间，&quot;modify_time&quot;字段自动填充为插入修改时间</span>
                            <span class="token punctuation">.</span><span class="token function">idType</span><span class="token punctuation">(</span><span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>    <span class="token comment">//设置主键自增</span>

                            <span class="token comment">//4.2、Controller策略配置</span>
                            <span class="token punctuation">.</span><span class="token function">controllerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">enableHyphenStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//开启驼峰连转字符</span>
                            <span class="token punctuation">.</span><span class="token function">formatFileName</span><span class="token punctuation">(</span><span class="token string">&quot;%sController&quot;</span><span class="token punctuation">)</span> <span class="token comment">//格式化 Controller 类文件名称，%s进行匹配表名，如 UserController</span>
                            <span class="token punctuation">.</span><span class="token function">enableRestStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//开启生成 @RestController 控制器</span>

                            <span class="token comment">//4.3、service 策略配置</span>
                            <span class="token punctuation">.</span><span class="token function">serviceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">formatServiceFileName</span><span class="token punctuation">(</span><span class="token string">&quot;%sService&quot;</span><span class="token punctuation">)</span> <span class="token comment">//格式化 service 接口文件名称，%s进行匹配表名，如 UserService</span>
                            <span class="token punctuation">.</span><span class="token function">formatServiceImplFileName</span><span class="token punctuation">(</span><span class="token string">&quot;%sServiceImpl&quot;</span><span class="token punctuation">)</span> <span class="token comment">//格式化 service 实现类文件名称，%s进行匹配表名，如 UserServiceImpl</span>

                            <span class="token comment">//4.4、Mapper策略配置</span>
                            <span class="token punctuation">.</span><span class="token function">mapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">superClass</span><span class="token punctuation">(</span><span class="token class-name">BaseMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token comment">//设置父类</span>
                            <span class="token punctuation">.</span><span class="token function">enableBaseResultMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//启用 BaseResultMap 生成</span>
                            <span class="token punctuation">.</span><span class="token function">enableBaseColumnList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//启用 BaseColumnList</span>
                            <span class="token punctuation">.</span><span class="token function">formatMapperFileName</span><span class="token punctuation">(</span><span class="token string">&quot;%sMapper&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//格式化 mapper 文件名称</span>
                            <span class="token punctuation">.</span><span class="token function">enableMapperAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">//开启 @Mapper 注解</span>
                            <span class="token punctuation">.</span><span class="token function">formatXmlFileName</span><span class="token punctuation">(</span><span class="token string">&quot;%sMapper&quot;</span><span class="token punctuation">)</span> <span class="token comment">//格式化Xml文件名称</span>
                            <span class="token punctuation">.</span><span class="token function">formatMapperFileName</span><span class="token punctuation">(</span><span class="token string">&quot;%sMapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//格式化Mapper文件名称</span>

                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">//5、模板</span>
                <span class="token punctuation">.</span><span class="token function">templateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VelocityTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">/*
                    模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker(以下两个引擎用哪个就保留哪个)
                   .templateEngine(new BeetlTemplateEngine())
                   .templateEngine(new FreemarkerTemplateEngine())
                 */</span>
                <span class="token punctuation">.</span><span class="token function">templateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//本人选择了Freemarker</span>
                <span class="token comment">//6、执行</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-拓展" tabindex="-1"><a class="header-anchor" href="#_4-拓展" aria-hidden="true">#</a> 4. 拓展</h2><h3 id="_4-1-全局id生成策略" tabindex="-1"><a class="header-anchor" href="#_4-1-全局id生成策略" aria-hidden="true">#</a> 4.1 全局ID生成策略</h3><blockquote><p>配置了之后就不需要在实体类主键上配置了</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global‐config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db‐config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id‐type</span><span class="token punctuation">:</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-逻辑删除" tabindex="-1"><a class="header-anchor" href="#_4-2-逻辑删除" aria-hidden="true">#</a> 4.2 逻辑删除</h3><p><strong>物理删除</strong>： 在删除的时候直接将数据从数据库干掉DELTE<br><strong>逻辑删除</strong>： 从逻辑层面控制删除，通常会在表里添加一个逻辑删除的字段比如 enabled 、is_deleted ，数据默认是有效的（值为1），当用户删除时将数据修改UPDATE 0， 在查询的时候就只查 where is_deleted =1.</p><blockquote><p>在阿里开发规范中，当我们设计数据库字段表示有 ” 是 否“ 相关概念是，应该是设置为is_xxxx 类型。</p></blockquote><p>需要添加逻辑删除的字段<br> 局部单表逻辑删除，需要在对应的<code>pojo</code>类加入对应的逻辑删除标识字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableLogic</span> <span class="token comment">// 代表逻辑删除（单个字段的）</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> is_deleted<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>开启全局逻辑删除配置，如果进行了全局逻辑删除配置并且指定了，就可以不用在每个实体类中配置了<code>@TableLogic</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global‐config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id‐type</span><span class="token punctuation">:</span> auto
      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> is_deletd <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span>
      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑已删除值(默认为 1)</span>
      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑未删除值(默认为 0)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当执行删除， 将会把逻辑删除字段进行修改，执行的sql语句为</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> is_deletd <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">where</span> id<span class="token operator">=</span> ? 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当执行查询时。会自动查询有效数据 where flag=1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email<span class="token punctuation">,</span>address <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> is_deleted<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-分页插件" tabindex="-1"><a class="header-anchor" href="#_4-3-分页插件" aria-hidden="true">#</a> 4.3 分页插件</h3><h4 id="_1-paginationinnerinterceptor" tabindex="-1"><a class="header-anchor" href="#_1-paginationinnerinterceptor" aria-hidden="true">#</a> 1. PaginationInnerInterceptor</h4><h5 id="支持的数据库" tabindex="-1"><a class="header-anchor" href="#支持的数据库" aria-hidden="true">#</a> 支持的数据库</h5><ul><li>mysql，oracle，db2，h2，hsql，sqlite，postgresql，sqlserver，Phoenix，Gauss ，clickhouse，Sybase，OceanBase，Firebird，cubrid，goldilocks，csiidb，informix，TDengine，redshift</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库，优炫数据库，星瑞格数据库</li></ul><h5 id="属性介绍" tabindex="-1"><a class="header-anchor" href="#属性介绍" aria-hidden="true">#</a> 属性介绍</h5><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311535119.png" alt="image-20230831153549029" tabindex="0" loading="lazy"><figcaption>image-20230831153549029</figcaption></figure><h4 id="_2-page" tabindex="-1"><a class="header-anchor" href="#_2-page" aria-hidden="true">#</a> 2. Page</h4><p>该类继承了 <code>IPage</code> 类，实现了 <code>简单分页模型</code> 如果你要实现自己的分页模型可以继承 <code>Page</code> 类或者实现 <code>IPage</code> 类</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311535033.png" alt="image-20230831153516852" tabindex="0" loading="lazy"><figcaption>image-20230831153516852</figcaption></figure><h4 id="_3-配置类" tabindex="-1"><a class="header-anchor" href="#_3-配置类" aria-hidden="true">#</a> 3. 配置类</h4><blockquote><p>要使用MP的分页插件，必须配置一个全局配置类，才可以全局生效。下面我就直接放代码，大家可以直接拿来用。</p></blockquote><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>package com.manman.common.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.autoconfigure.ConfigurationCustomizer;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @author Loe
 */
@Configuration
@MapperScan(&quot;com.Leo.mp.mapper&quot;)
public class MybatisPlusConfig {

    /**
     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)
     */
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }

    @Bean
    public ConfigurationCustomizer configurationCustomizer() {
        return configuration -&gt; configuration.setUseDeprecatedExecutor(false);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-乐观锁插件" tabindex="-1"><a class="header-anchor" href="#_4-4-乐观锁插件" aria-hidden="true">#</a> 4.4 乐观锁插件</h3><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><blockquote><p>悲观锁：</p><p>悲观锁，正如其名，具有强烈的独占和排他特性。它指的是对数据被外界(包括本系统当前的其他事务，以及来自外部系统的事务处理)修改持保守态度。因此，在整个数据处理过程中，将数据处于锁定状态。<br> 假设功能并发量非常大，就需要使用 synchronized 来处理高并发下产生线程不安全问题， 会使其他线程进行挂起等待从而影响系统吞吐量</p></blockquote><blockquote><p>乐观锁：</p><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。<br> 假设功能产生并发几率极少，采用乐观锁版本机制对比， 如果有冲突 返回给用户错误的信息</p></blockquote><h4 id="_2-为什么需要锁" tabindex="-1"><a class="header-anchor" href="#_2-为什么需要锁" aria-hidden="true">#</a> 2. 为什么需要锁</h4><blockquote><p>在多用户环境中，在同一时间可能会有多个用户更新相同的记录，这会产生冲突。这就是著名的并发性问题</p></blockquote><p><strong>丢失更新</strong>：一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户1把值从500改为8000，用户B把值从500改为200，则多人同时提交同一条记录，后提交的把之前的提交数据覆盖。<br> 脏读：当一个事务读取其它完成一半事务的记录时，就会发生脏读。例如：用户A,B看到的值都是500，用户B把值改为200，用户A读到的值仍为500。</p><p>针对一种问题的解决方案，为解决问题而生的。解决什么问题呢？主要是解决丢失更新问题如下图理解</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311528221.png" alt="image-20230831152857083" tabindex="0" loading="lazy"><figcaption>image-20230831152857083</figcaption></figure><p>为了解决这些并发带来的问题。 我们需要引入<strong>并发控制机制</strong>。</p><h4 id="_3-编码实现" tabindex="-1"><a class="header-anchor" href="#_3-编码实现" aria-hidden="true">#</a> 3. 编码实现</h4><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311531912.png" alt="image-20230831153117810" tabindex="0" loading="lazy"><figcaption>image-20230831153117810</figcaption></figure><ol><li><p>在对应的实体类中加version字段，并设置成下面这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Version</span> <span class="token comment">//这就是控制版本的</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span> <span class="token comment">//这个方便在添加的时候设置版本初始为1</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span> <span class="token comment">//版本的字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建一个新的类，实现<code>MetaObjectHandler</code>自动填充，像创建时间，更新时间也可以在这操作。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//这里的“version”就是指定的字段，设置初始值为1，之后每修改一次+1 </span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在创建一个配置类，开启一个乐观锁插件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.zhz.mapper&quot;</span><span class="token punctuation">)</span><span class="token comment">//这里就是你的mapper文件的包</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>
	<span class="token comment">//乐观锁插件</span>
	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">OptimisticLockerInterceptor</span> <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>接下来在做增加数据的时候，调用 insert 添加方法就可以了。修改的时候呢，我们需要先查人后再做修改，因为我们为了防止问题的发生，需要先去查询版本号比对才进行后续操作！！</p></blockquote><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>以上便是关于MP相关的内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<code>Leo</code>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<code>Leo</code>，可以关注下面这个公众号，后面文章会首先同步至公众号。</p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308311543516.png" alt="扫码_搜索联合传播样式-标准色版" style="zoom:50%;"><p>参考资料：</p>`,148),h={href:"https://baomidou.com/",target:"_blank",rel:"noopener noreferrer"},y=n("figure",null,[n("img",{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png",alt:"公众号封面",tabindex:"0",loading:"lazy"}),n("figcaption",null,"公众号封面")],-1);function f(q,w){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("官网： "),n("a",r,[s("https://baomidou.com/"),e(a)]),d,s(" 简介："),k,s(" (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。")]),m,n("p",null,[s("编写实体类 "),v,s("（此处使用了 "),n("a",g,[s("Lombok (opens new window)"),e(a)]),s("简化代码）")]),b,n("p",null,[n("a",h,[s("MP官网"),e(a)])]),y])}const S=p(l,[["render",f],["__file","myBatisplus-one-pass.html.vue"]]);export{S as default};
