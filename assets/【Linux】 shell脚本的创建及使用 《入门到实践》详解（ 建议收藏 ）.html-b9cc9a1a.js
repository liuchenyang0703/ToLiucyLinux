import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as r,a,b as s,d as n,w as l,e as i}from"./app-8d307529.js";const d={},u=a("figure",null,[a("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/5815d09c83304c36a9938c0a4528a791.png",alt:"shell 图标",tabindex:"0",loading:"lazy"}),a("figcaption",null,"shell 图标")],-1),b=a("p",null,[s("👨‍🎓"),a("strong",null,"博主简介")],-1),h={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},v=a("br",null,null,-1),m={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},k=a("br",null,null,-1),g={href:"https://bbs.huaweicloud.com/community/myblog",target:"_blank",rel:"noopener noreferrer"},_=a("br",null,null,-1),f={href:"https://developer.aliyun.com/my?spm=a2c6h.13148508.setting.3.21fc4f0eCmz1v3#/article?_k=zooqoz",target:"_blank",rel:"noopener noreferrer"},x=a("br",null,null,-1),y=a("strong",null,"交流社区：",-1),q={href:"https://bbs.csdn.net/forums/lcy",target:"_blank",rel:"noopener noreferrer"},$=a("br",null,null,-1),C=a("br",null,null,-1),A=i(`<hr><h1 id="shell脚本简介" tabindex="-1"><a class="header-anchor" href="#shell脚本简介" aria-hidden="true">#</a> shell脚本简介</h1><p>shell 用户与内核沟通的桥梁</p><h2 id="shell的分类" tabindex="-1"><a class="header-anchor" href="#shell的分类" aria-hidden="true">#</a> shell的分类：</h2><ul><li>第一类：bash sh csh</li><li>第二类：ksh</li></ul><h2 id="shell脚本的好处" tabindex="-1"><a class="header-anchor" href="#shell脚本的好处" aria-hidden="true">#</a> shell脚本的好处：</h2><p>将命令按照一定顺序保存到文件中，统一执行</p><ul><li>解决重复性的工作</li><li>可以避免一些低级错误</li></ul><h2 id="一些语言的脚本后缀" tabindex="-1"><a class="header-anchor" href="#一些语言的脚本后缀" aria-hidden="true">#</a> 一些语言的脚本后缀</h2><ul><li>perl--&gt;.pl</li><li>python--&gt;.py</li><li>php--&gt;.php</li><li>shell--&gt;.sh</li></ul><h2 id="编程语言分类" tabindex="-1"><a class="header-anchor" href="#编程语言分类" aria-hidden="true">#</a> 编程语言分类：</h2><hr><ul><li>编译型 C C++</li><li>解释型 python shell php</li></ul><hr><ul><li>面向对象 python java C++</li><li>面向过程 shell C</li></ul><hr><ul><li>静态语言：java C</li><li>动态语言：shell python</li></ul><hr><ul><li>强类型：java python</li><li>弱类型：shell C</li></ul><hr><h2 id="shell脚本的固定书写" tabindex="-1"><a class="header-anchor" href="#shell脚本的固定书写" aria-hidden="true">#</a> shell脚本的固定书写</h2><ul><li>创建shell脚本</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#直接进入并写脚本，会自动创建</span>
<span class="token function">vim</span> first.sh

<span class="token comment">#手动创建</span>
<span class="token function">touch</span> first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>#！/bin/bash--&gt;幻数，指定解释器，在每次的shell脚本中的最顶行写</li><li># 为注释符</li><li>echo &quot;Hello world!&quot; 可执行代码，输出Hello world!</li></ul><h2 id="如何执行shell脚本" tabindex="-1"><a class="header-anchor" href="#如何执行shell脚本" aria-hidden="true">#</a> 如何执行shell脚本</h2>`,25),w={href:"http://first.sh/sh",target:"_blank",rel:"noopener noreferrer"},B={href:"http://first.sh",target:"_blank",rel:"noopener noreferrer"},j=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> first.sh
<span class="token operator">&amp;&amp;</span>
<span class="token function">sh</span> first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>相对路径或绝对路径执行脚本，此时必须加执行权限（./first.sh）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),L={href:"http://first.sh",target:"_blank",rel:"noopener noreferrer"},z=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推荐使用<code>sh first.sh</code>。</p><h1 id="shell脚本变量" tabindex="-1"><a class="header-anchor" href="#shell脚本变量" aria-hidden="true">#</a> shell脚本变量</h1><blockquote><p>变量：用字符串表示一个值，用于存储值的位置，这个字符串叫变量名<br>  <br> 定义变量：变量名=变量值   python=$(ps -ef | grep -v grep | grep python | wc -l)<br> 调用变量：$变量名       echo $python<br> 删除变量：unset 变量名   unset &amp;python <br>  </p></blockquote>`,4),M=i('<ul><li>变量是临时保存在内存中</li><li>set 查看系统所有的变量</li></ul><h2 id="变量的命名规则" tabindex="-1"><a class="header-anchor" href="#变量的命名规则" aria-hidden="true">#</a> 变量的命名规则：</h2><ul><li>1.变量名要有意义。不要使用a,b,c</li><li>2.可以采用驼峰式命名或_隔开的方式</li><li>3.命名时应该避开系统的关键字</li><li>4.对于常量采用全部大写表示</li></ul><h2 id="shell中变量的分类" tabindex="-1"><a class="header-anchor" href="#shell中变量的分类" aria-hidden="true">#</a> shell中变量的分类：</h2><ul><li>预定义变量</li><li>位置变量</li><li>环境变量</li><li>自定义变量</li></ul>',5),I=a("br",null,null,-1),N=a("br",null,null,-1),D=a("br",null,null,-1),E=a("br",null,null,-1),H=a("ul",null,[a("li",null,"$0 保存脚本执行的路径"),a("li",null,"$# 保存脚本处理的 参数个数"),a("li",null,"$* 保存脚本处理的所有参数，把参数作为整体进行保存"),a("li",null,"$@ 保存脚本处理的所有参数，把参数作为个体进行保存"),a("li",null,[a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mtext",null,"保存脚本的"),a("mi",null,"P"),a("mi",null,"I"),a("mi",null,"D")]),a("annotation",{encoding:"application/x-tex"}," 保存脚本的PID ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"保存脚本的"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D")])])])])])]),a("li",null,"$_ 保存上一条命令的参数")],-1),P=a("p",null,"env 查看系统环境变量",-1),S=i(`<p>export 变量名=变量值<br> 变量名=变量值，export变量名</p><blockquote><p>/etc/bashrc<br> /etc/profile</p><p>~/.bashrc<br> ~/.bash_profile</p><p>当打开终端时，会默认去读取系统中环境变量设置的文件 /etc/profile</p></blockquote><h1 id="shell脚本的计算" tabindex="-1"><a class="header-anchor" href="#shell脚本的计算" aria-hidden="true">#</a> shell脚本的计算</h1><h2 id="只能做整数计算" tabindex="-1"><a class="header-anchor" href="#只能做整数计算" aria-hidden="true">#</a> (( )) 只能做整数计算</h2><blockquote><ul><li>+加</li><li>-减</li><li>*乘</li><li>/除</li><li>%余</li><li>2**5二的五次方</li></ul></blockquote><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#加法</span>
<span class="token assign-left variable">jia</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$jia</span>

<span class="token comment">#减法</span>
<span class="token assign-left variable">jian</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$jian</span>

<span class="token comment">#乘法</span>
<span class="token assign-left variable">cheng</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$cheng</span>

<span class="token comment">#除法</span>
<span class="token assign-left variable">chu</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">18</span><span class="token operator">/</span><span class="token number">3</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$chu</span>

<span class="token comment">#余数</span>
<span class="token assign-left variable">yu</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">13</span><span class="token operator">%</span><span class="token number">2</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$yu</span>

<span class="token comment">#2的3次方</span>
<span class="token assign-left variable">ci</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$ci</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@cs ~<span class="token punctuation">]</span><span class="token comment"># sh cs.sh</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">9</span>
<span class="token number">6</span>
<span class="token number">1</span>
<span class="token number">32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="只能做整数计算-和-一样" tabindex="-1"><a class="header-anchor" href="#只能做整数计算-和-一样" aria-hidden="true">#</a> []只能做整数计算（和(())一样）</h2><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">abc</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token number">1</span> + <span class="token number">4</span> <span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="expr只能做整数计算-可用于判断是否为整数" tabindex="-1"><a class="header-anchor" href="#expr只能做整数计算-可用于判断是否为整数" aria-hidden="true">#</a> expr 只能做整数计算（可用于判断是否为整数）</h2><blockquote><p>加、减、乘、除、余、次方都可以</p></blockquote>`,16),V=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function">expr</span> <span class="token number">10</span> + <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为：30</p><hr><p>也可以用来判断以上结果是否为整数；实例：<br> （这个可以先看看，后面会教if判断的。）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment">#交互方式输入数字</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;please input is number:&quot;</span> number

<span class="token comment">#判断是否为整数</span>
<span class="token function">expr</span> <span class="token number">10</span> + <span class="token variable">$number</span> <span class="token operator">&amp;&gt;</span>/dev/null

<span class="token comment">#如果为整数就会返回0，如果不是会返回其他，并打印出来。</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${number}</span>不是合法整数&quot;</span>
	<span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${number}</span>是整数&quot;</span>
<span class="token keyword">fi</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bc计算器-可小数点" tabindex="-1"><a class="header-anchor" href="#bc计算器-可小数点" aria-hidden="true">#</a> bc 计算器（可小数点）</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;3+5&quot;</span><span class="token operator">|</span> <span class="token function">bc</span>	不交互计算<span class="token operator">=</span><span class="token number">8</span>

<span class="token comment">#2为要保留的小数点位数</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=2;3/5&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span>	保留两位小数<span class="token operator">=</span>.60
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let整数计算-与-一样" tabindex="-1"><a class="header-anchor" href="#let整数计算-与-一样" aria-hidden="true">#</a> let 整数计算，与(( ))一样</h2><p>原本a=10，let a++ ，在执行一次ehco $a就=11了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token builtin class-name">let</span> a++ 
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span>

结果为11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要用于while循环中，变量自增赋值# shell脚本的内置命令</p><h1 id="内置命令" tabindex="-1"><a class="header-anchor" href="#内置命令" aria-hidden="true">#</a> 内置命令</h1><h2 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h2><blockquote><p>echo 将指定内容输出到屏幕上，通常打印变量值，默认是换行打印</p></blockquote><p>echo 参数：</p><ul><li>-n 不换行打印</li><li>-e 解释转义字符</li></ul><p>（这两个用于echo之后，输出文字之前使用，例如：echo -e &quot;\\e[5;44;30mabcabc\\e[0m&quot;）</p><p>常见的转义字符：</p><ul><li>\\a 响铃</li><li>\\n 换行</li><li>\\r 回车</li><li>\\t 水平制表符（tab）</li><li>\\v 垂直制表符</li><li>\\b 删除前一个字符</li></ul><p>(用于输出文字内使用，例如：echo -e &quot;123\\n332&quot;换行)</p><p>单引号和双引号的区别：</p><ul><li>单引号：所见即所得（意思是：看到的是什么，输出的就是什么）；</li><li>双引号：可以解释$引用的变量</li></ul>`,22),R=a("blockquote",null,[a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mo",{stretchy:"false"},")"),a("mtext",null,"等于"),a("mover",{accent:"true"},[a("mi",{mathvariant:"normal"},"‘"),a("mo",null,"ˋ")]),a("mtext",null,"优先执行里面的指令，一般用于设置变量"),a("mi",null,"p"),a("mi",null,"y"),a("mi",null,"j"),a("mo",null,"=")]),a("annotation",{encoding:"application/x-tex"},"()等于 \\`` 优先执行里面的指令，一般用于设置变量 pyj=")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.2079em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mclose"},")"),a("span",{class:"mord cjk_fallback"},"等于"),a("span",{class:"mord accent"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.9579em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},"‘")]),a("span",{style:{top:"-3.2634em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"accent-body",style:{left:"-0.25em"}},[a("span",{class:"mord"},"ˋ")])])])])])]),a("span",{class:"mord cjk_fallback"},"优先执行里面的指令，一般用于设置变量"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"=")])])]),s("(ps -ef | grep -v grep | grep python | wc -l)"),a("br"),s(" pyj2=`ps -ef | grep -v grep | grep python | wc -l`")])],-1),T=i(`<p>利用echo输出带颜色的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#使用方法</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\e">\\e</span>[字体控制颜色；字体背景颜色；文字颜色m 字符串<span class="token entity" title="\\e">\\e</span>[0m&quot;</span>
<span class="token comment">#实例：（输出一个闪烁的；字体背景颜色为蓝色；字体颜色为黑色的abcabc）</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\e">\\e</span>[5;44;30mabcabc<span class="token entity" title="\\e">\\e</span>[0m&quot;</span>
<span class="token comment">#输出一个字体颜色为绿色的abcabc</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\e">\\e</span>[32mabcabc<span class="token entity" title="\\e">\\e</span>[0m&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>常见的字体颜色：重置=0，黑色=30m，红色=31m，绿色=32m，黄色=33m，蓝色=34m，紫色=35m，青色=36，白色=37m。<br>  <br> 常见的背景颜色：重置=0，黑色=40，红色=41，绿色=42，黄色=43，蓝色=44，紫色=45，青色=46，白色=47。<br>  <br> 字体控制选项：1=高亮，2=一半亮度（暗色），3=斜体，4=下划线，5=闪烁，7=反显，8=隐藏。<br>  <br> 注:因为需要使用特殊符号，所以需要配合-e选项来识别特殊符号。</p></blockquote><p>echo 注意事项：</p><blockquote><p>在使用echo命令时，如果输出内容中含有！,不可以使用双引号，只可以使用单引号，因为默认!的作用是调用历史命令记录，除非使用set +H关闭历史命令引用。<br> set +H 关闭历史命令引用</p></blockquote><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h2><blockquote><p>read命令 从标准输入读取内容</p></blockquote><p>read命令参数：</p><ul><li>-p 打印提示</li><li>-t 指定超时时间</li><li>-s 不显示屏幕输入的内容（主要用于输入密码之类的）</li></ul><p>在firest.sh中写<br> 例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#提示请输入您的姓名：输入完成之后回车即可，该name变量可在其他地方调用</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入您的姓名：&quot;</span>  name
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>

<span class="token comment">#提示请输入您的姓名，五秒之内不输入就会自动退出会话，输入完成之后回车即可，该name变量可在其他地方调用</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">5</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入您的姓名：&quot;</span>  name
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>

<span class="token comment">#提示请输入您的姓名，五秒之内不输入就会自动退出会话，输入的时候不显示你输入的内容，输入完成之后回车即可，该name变量可在其他地方调用</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">5</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;请输入您的姓名：&quot;</span>  name
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果read后没有指定变量名，默认会将参数值传递给REPLY</p><h1 id="shell脚本流程控制语句" tabindex="-1"><a class="header-anchor" href="#shell脚本流程控制语句" aria-hidden="true">#</a> shell脚本流程控制语句</h1><h2 id="条件测试-前后都要有空格" tabindex="-1"><a class="header-anchor" href="#条件测试-前后都要有空格" aria-hidden="true">#</a> 条件测试（前后都要有空格）</h2><p>test 条件 或 [ 条件 ]</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">test</span> anaconda-ks.cfg
<span class="token punctuation">[</span> <span class="token parameter variable">-f</span> anaconda-ks.cfg <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件测试-前后都要有空格" tabindex="-1"><a class="header-anchor" href="#文件测试-前后都要有空格" aria-hidden="true">#</a> 文件测试（[]前后都要有空格）</h2><ul><li>-f 判断是否为文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> anaconda-ks.cfg <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-d 判断是否是目录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token parameter variable">-d</span> /dir1 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-e 判断文件或目录是否存在</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token parameter variable">-e</span> anaconda-ks.cfg <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-b 判断是否为设备文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token parameter variable">-b</span> anaconda-ks.cfg <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-l 判断是否为链接文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token parameter variable">-l</span> anaconda-ks.cfg <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-e 判断一个文件是否为空文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token parameter variable">-e</span> anaconda-ks.cfg <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="整数测试-常用于if判断中" tabindex="-1"><a class="header-anchor" href="#整数测试-常用于if判断中" aria-hidden="true">#</a> 整数测试（常用于if判断中）</h2><ul><li>-eq 等于</li><li>-ne 不等于</li><li>-gt 大于</li><li>-lt 小于</li><li>-ge 大于等于</li><li>-le 小于等于</li></ul><p>(( )) 可以直接使用符号比较大小</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#等于1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span>

<span class="token comment">#不等于1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ne</span> <span class="token number">1</span> <span class="token punctuation">]</span>

<span class="token comment">#大于1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span>

<span class="token comment">#小于1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">1</span> <span class="token punctuation">]</span>

<span class="token comment">#大于等于1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ge</span> <span class="token number">1</span> <span class="token punctuation">]</span>

<span class="token comment">#小于等于1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-le</span> <span class="token number">1</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串测试-常用于if判断中" tabindex="-1"><a class="header-anchor" href="#字符串测试-常用于if判断中" aria-hidden="true">#</a> 字符串测试（常用于if判断中）</h2><ul><li>== 等于</li><li>！= 不等于</li><li>-z 判断字符串是否为空</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#等于“测试”</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;测试&quot;</span> <span class="token punctuation">]</span>

<span class="token comment">#不等于“测试”</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token operator">!=</span> <span class="token string">&quot;测试&quot;</span> <span class="token punctuation">]</span>

<span class="token comment">#判断$a参数是否为空</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑关系" tabindex="-1"><a class="header-anchor" href="#逻辑关系" aria-hidden="true">#</a> 逻辑关系</h2><ul><li>&amp;&amp; 与/并且</li><li>|| 或</li><li>! 非</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#判断1不等于1，成立输出0，不成立输出1</span>
<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token parameter variable">-ne</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token number">1</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="shell中字符串操作" tabindex="-1"><a class="header-anchor" href="#shell中字符串操作" aria-hidden="true">#</a> shell中字符串操作</h1><h2 id="求变量字符串长度" tabindex="-1"><a class="header-anchor" href="#求变量字符串长度" aria-hidden="true">#</a> 求变量字符串长度：</h2><ul><li id="变量名">1.echo $</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12345678</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>a}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),Y=i(`<ul><li>2.echo $变量名 | wc -L</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12345678</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-L</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),F=i(`<ul><li>3.expr length $变量名</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12345678</span>
<span class="token function">expr</span> length <span class="token variable">$a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),G=i(`<ul><li>4.echo $变量名 | awk &#39;{print length($0)}&#39;</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12345678</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print length($0)}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),J=i(`<h2 id="变量字符串的截取" tabindex="-1"><a class="header-anchor" href="#变量字符串的截取" aria-hidden="true">#</a> 变量字符串的截取：</h2><ul><li>echo \${变量名:3} 截取字符串的前三个丢弃</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">12345678</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">:</span>3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),K=i(`<ul><li>echo \${变量名:3:2} 截取字符串的前三个丢弃，后面只要两个字符串，其余都不要了</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">:</span>3<span class="token operator">:</span>2}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O=i(`<hr><ul><li>echo \${变量名#A*C} 截取字符串的第一个A到第一个C（包含C）并丢弃；从头开始，最少匹配删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">#</span>A*C}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Q=i(`<ul><li>echo \${变量名##A*C} 截取字符串的第一个A到最后一个C（包含C）并丢弃；从头开始，最多匹配删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">##</span>A*C}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),U=i(`<hr><ul><li>echo \${变量名%b*c} 截取字符串的最后一个b到最后一个c（包含c）并丢弃；从结尾开始，最少匹配删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">%</span>b*c}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),W=i(`<ul><li>echo \${变量名%%C*c} 截取字符串的最第一个C到最后一个c（包含c）并丢弃；从结尾开始，最多匹配删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">%%</span>C*c}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),X=a("h2",{id:"变量字符串的替换",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#变量字符串的替换","aria-hidden":"true"},"#"),s(" 变量字符串的替换：")],-1),Z=a("ul",null,[a("li",null,"echo ${变量名/A/a} 将变量内容匹配的第一个字符替换")],-1),aa=a("p",{变量oldnew:""},"echo $",-1),sa=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">/</span>C<span class="token operator">/</span>c}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),na=a("ul",null,[a("li",null,"ehco ${变量名//A/a] 将变量内容匹配的所有字符替换")],-1),ea=a("p",{变量oldnew:""},"echo $",-1),la=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span>AAABBBCCC123aaabbbccc
<span class="token builtin class-name">echo</span> <span class="token variable">\${a<span class="token operator">/</span><span class="token operator">/</span>C<span class="token operator">/</span>c}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ia=i(`<h1 id="cut字符串切割" tabindex="-1"><a class="header-anchor" href="#cut字符串切割" aria-hidden="true">#</a> cut字符串切割</h1><ul><li>-d 自定义分隔符</li><li>-f 与-d一起使用，指定显示那个区域</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;192.168.2.10&quot;</span><span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;.&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">1</span>		<span class="token comment">#结果为192</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;192.168.2.10&quot;</span><span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;.&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">2</span>		<span class="token comment">#结果为168</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;192.168.2.10&quot;</span><span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;.&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">3</span>		<span class="token comment">#结果为2</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;192.168.2.10&quot;</span><span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;.&quot;</span> <span class="token parameter variable">-f</span> <span class="token number">4</span>		<span class="token comment">#结果为10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="shell脚本数组" tabindex="-1"><a class="header-anchor" href="#shell脚本数组" aria-hidden="true">#</a> shell脚本数组</h1><h2 id="定义数组" tabindex="-1"><a class="header-anchor" href="#定义数组" aria-hidden="true">#</a> 定义数组：</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>值1 值2 值3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组的增删改查" tabindex="-1"><a class="header-anchor" href="#数组的增删改查" aria-hidden="true">#</a> 数组的增删改查：</h2><h3 id="查" tabindex="-1"><a class="header-anchor" href="#查" aria-hidden="true">#</a> 查：</h3><ul><li>echo \${array[*]}或者echo \${array[@]} 打印数组中所有的值</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,13),ta=a("ul",null,[a("li",null,"echo ${array[1]} 打印数组中指定的值")],-1),ca=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,2),oa=i(`<ul><li>echo \${#array[*]} 求数组的长度</li><li>echo \${#array[@]} 求数组的长度</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,3),pa=i(`<ul><li>echo \${#array[1]} 求数组中的某一个字符串的长度</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,3),ra=i(`<h3 id="增" tabindex="-1"><a class="header-anchor" href="#增" aria-hidden="true">#</a> 增：</h3><blockquote><p>array[3]=xiaohuang 给指定的位置加一个值</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>xiaohuang
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>3<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,4),da=i(`<h3 id="改" tabindex="-1"><a class="header-anchor" href="#改" aria-hidden="true">#</a> 改：</h3><blockquote><p>array[3]=xiaocheng 如果脚标对应位置有值，就修改；脚标可以不是数字array[脚标]</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>xiaohei
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,4),ua=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>xiaoming xiaohong xiaolan<span class="token punctuation">)</span>
<span class="token comment">#修改第二个姓名</span>
array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>xiaohei
<span class="token comment">#删除第三个姓名</span>
<span class="token builtin class-name">unset</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果为：</p></blockquote>`,2),ba=a("h1",{id:"相关文章",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#相关文章","aria-hidden":"true"},"#"),s(" 相关文章：")],-1),ha=a("thead",null,[a("tr",null,[a("th",{style:{"text-align":"left"}},"文章名"),a("th",{style:{"text-align":"left"}},"文章地址")])],-1),va={style:{"text-align":"left"}},ma={href:"https://liucy.blog.csdn.net/article/details/130111812",target:"_blank",rel:"noopener noreferrer"},ka={style:{"text-align":"left"}},ga={href:"https://liucy.blog.csdn.net/article/details/130111812",target:"_blank",rel:"noopener noreferrer"},_a={style:{"text-align":"left"}},fa={href:"https://liucy.blog.csdn.net/article/details/130387377",target:"_blank",rel:"noopener noreferrer"},xa={style:{"text-align":"left"}},ya={href:"https://liucy.blog.csdn.net/article/details/130387377",target:"_blank",rel:"noopener noreferrer"},qa={style:{"text-align":"left"}},$a={href:"https://liucy.blog.csdn.net/article/details/130387523",target:"_blank",rel:"noopener noreferrer"},Ca={style:{"text-align":"left"}},Aa={href:"https://liucy.blog.csdn.net/article/details/130387523",target:"_blank",rel:"noopener noreferrer"};function wa(Ba,ja){const t=c("ExternalLinkIcon"),e=c("font");return p(),r("div",null,[u,a("blockquote",null,[b,a("p",null,[s("  🏅"),a("a",h,[s("CSDN博客专家"),n(t)]),v,s("   🏅"),a("a",m,[s("云计算领域优质创作者"),n(t)]),k,s("   🏅"),a("a",g,[s("华为云开发者社区专家博主"),n(t)]),_,s("   🏅"),a("a",f,[s("阿里云开发者社区专家博主"),n(t)]),x,s(" 💊"),y,a("a",q,[s("运维交流社区"),n(t)]),s(" 欢迎大家的加入！"),$,s(" 🐋 希望大家多多支持，我们一起进步！😄"),C,s(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])]),A,a("ul",null,[a("li",null,[s("bash 文件名或着sh 文件名直接执行脚本，此时不需要加执行权限（bash "),a("a",w,[s("first.sh/sh"),n(t)]),s(),a("a",B,[s("first.sh"),n(t)]),s("）")])]),j,a("ul",null,[a("li",null,[s("source执行 在当前shell下执行脚本（source "),a("a",L,[s("first.sh"),n(t)]),s("）")])]),z,n(e,{color:"red"},{default:l(()=>[s("在shell调用一个未赋值的变量，不会报错，会返回空值；")]),_:1}),M,a("blockquote",null,[n(e,{color:"gree"},{default:l(()=>[s("预定义变量：")]),_:1}),s("shell中预先设置好的变量，可以直接调用"),a("p",null,[s(" "),I,s(" 举例："),N,s(" 就比如我定义一个变量是查找python的进程数量"),D,s(" pyj=$(ps -ef | grep -v grep | grep python | wc -l)"),E,s(" 调用的时候这样调用echo "),n(e,{color:"red"},{default:l(()=>[s("$pyj")]),_:1})])]),a("blockquote",null,[n(e,{color:"gree"},{default:l(()=>[s("位置变量：")]),_:1}),s("脚本传递的位置参数，默认可以使用$1-$9，不交互传参 "),H]),a("blockquote",null,[n(e,{color:"gree"},{default:l(()=>[s("环境变量：")]),_:1})]),P,a("blockquote",null,[n(e,{color:"gree"},{default:l(()=>[s("自定义变量：")]),_:1}),s("默认直在当前shell生效，如果想在其新打开的shell下也生效，可以使用export将变量导出")]),S,n(e,{color:"red"},{default:l(()=>[s("使用expr来做计算，计算单位前后都要加空格")]),_:1}),V,R,T,a("p",null,[s("输出结果为："),n(e,{color:"red"},{default:l(()=>[s("8")]),_:1})]),Y,a("p",null,[s("输出结果为："),n(e,{color:"red"},{default:l(()=>[s("8")]),_:1})]),F,a("p",null,[s("输出结果为："),n(e,{color:"red"},{default:l(()=>[s("8")]),_:1})]),G,a("p",null,[s("输出结果为："),n(e,{color:"red"},{default:l(()=>[s("8")]),_:1})]),J,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("45678")]),_:1})]),K,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("BB")]),_:1})]),O,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("CC123aaabbbccc")]),_:1})]),Q,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("123aaabbbccc")]),_:1})]),U,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("AAABBBCCC123aaabb")]),_:1})]),W,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("AAABBB")]),_:1})]),X,Z,aa,sa,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("AAABBBcCC123aaabbbccc")]),_:1})]),na,ea,la,a("p",null,[s("结果为："),n(e,{color:"red"},{default:l(()=>[s("AAABBBccc123aaabbbccc")]),_:1})]),ia,n(e,{color:"red"},{default:l(()=>[s("xiaoming xiaohong xiaolan xiaoming xiaohong xiaolan")]),_:1}),ta,n(e,{color:"gree"},{default:l(()=>[s("注意：数组是从0开始算的；")]),_:1}),ca,n(e,{color:"red"},{default:l(()=>[s("xiaoming xiaohong xiaolan")]),_:1}),oa,n(e,{color:"red"},{default:l(()=>[s("3 3 ")]),_:1}),pa,n(e,{color:"red"},{default:l(()=>[s("8 8 7")]),_:1}),ra,n(e,{color:"red"},{default:l(()=>[s("xiaohuang xiaoming xiaohong xiaolan xiaohuang ")]),_:1}),da,n(e,{color:"red"},{default:l(()=>[s("xiaohei xiaoming xiaohong xiaohei ")]),_:1}),s(" ### 删： >unset array 删除指定数组（array数组名称） unset array[3] 删除指定位置的值 "),ua,n(e,{color:"red"},{default:l(()=>[s("空 xiaoming xiaohong")]),_:1}),ba,a("table",null,[ha,a("tbody",null,[a("tr",null,[a("td",va,[a("a",ma,[s("【Linux】 shell脚本的创建及使用 《入门到实践》详解[⭐建议收藏！！⭐]"),n(t)])]),a("td",ka,[a("a",ga,[s("https://liucy.blog.csdn.net/article/details/130111812"),n(t)])])]),a("tr",null,[a("td",_a,[a("a",fa,[s("【Linux】Shell脚本之函数的操作+实战详解[⭐建议收藏！！⭐]"),n(t)])]),a("td",xa,[a("a",ya,[s("https://liucy.blog.csdn.net/article/details/130387377"),n(t)])])]),a("tr",null,[a("td",qa,[a("a",$a,[s("【Linux】Shell脚本之 if判断、case判断、for循环、while循环 + 实战详解[⭐建议收藏！！⭐]"),n(t)])]),a("td",Ca,[a("a",Aa,[s("https://liucy.blog.csdn.net/article/details/130387523"),n(t)])])])])])])}const Ma=o(d,[["render",wa],["__file","【Linux】 shell脚本的创建及使用 《入门到实践》详解（ 建议收藏 ）.html.vue"]]);export{Ma as default};
