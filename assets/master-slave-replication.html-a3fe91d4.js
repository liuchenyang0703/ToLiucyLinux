import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as l,c as d,a as e,b as a,d as o,e as c}from"./app-8d307529.js";const r={},t={class:"hint-container tip"},p=e("p",{class:"hint-container-title"},"友情提示",-1),g=e("strong",null,"转载须知",-1),m={href:"https://www.bilibili.com/video/BV1iq4y1u7vj?p=1&vd_source=cea816a08805c218ac4390ae9b61ae31",target:"_blank",rel:"noopener noreferrer"},u=c(`<h2 id="_1-主从复制概述" tabindex="-1"><a class="header-anchor" href="#_1-主从复制概述" aria-hidden="true">#</a> 1. 主从复制概述</h2><h3 id="_1-1-如何提升数据库并发能力" tabindex="-1"><a class="header-anchor" href="#_1-1-如何提升数据库并发能力" aria-hidden="true">#</a> 1.1 如何提升数据库并发能力</h3><p>在实际工作中，我们常常将<code>Redis</code>作为缓存与<code>MySQL</code>配合来使用，当有请求的时候，首先会从缓存中进行查找，如果存在就直接取出。如果不存在再访问数据库，这样就<code>提升了读取的效率</code>，也减少了对后端数据库的<code>访问压力</code>。Redis的缓存架构是<code>高并发架构</code>中非常重要的一环。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220715202237535.png" alt="image-20220715202237535" tabindex="0" loading="lazy"><figcaption>image-20220715202237535</figcaption></figure><p>此外，一般应用对数据库而言都是“ <code>读多写少</code> ”，也就说对数据库读取数据的压力比较大，有一个思路就是采用数据库集群的方案，做 <code>主从架构</code> 、进行 <code>读写分离</code> ，这样同样可以提升数据库的并发处理能力。但并不是所有的应用都需要对数据库进行主从架构的设置，毕竟设置架构本身是有成本的。</p><p>如果我们的目的在于提升数据库高并发访问的效率，那么首先考虑的是如何 <code>优化SQL和索引</code> ，这种方式 简单有效；其次才是采用 <code>缓存的策略</code> ，比如使用 Redis将热点数据保存在内存数据库中，提升读取的效率；最后才是对数据库采用 <code>主从架构</code> ，进行读写分离。</p><p>按照上面的方式进行优化，使用和维护的成本是由低到高的。</p><h3 id="_1-2-主从复制的作用" tabindex="-1"><a class="header-anchor" href="#_1-2-主从复制的作用" aria-hidden="true">#</a> 1.2 主从复制的作用</h3><p>主从同步设计不仅可以提高数据库的吞吐量，还有以下 3 个方面的作用。</p><p><strong>第1个作用：读写分离。</strong> 我们可以通过主从复制的方式来<code>同步数据</code>，然后通过读写分离提高数据库并发处理能力。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220715212521601.png" alt="image-20220715212521601" tabindex="0" loading="lazy"><figcaption>image-20220715212521601</figcaption></figure><p>其中一个是Master主库，负责写入数据，我们称之为：写库。</p><p>其他都是Slave从库，负责读取数据，我们称之为：读库。</p><p>当主库进行更新的时候，会自动将数据复制到从库中，而我们在客户端读取数据的时候，会从从库进行读取。</p><p>面对“读多写少”的需求，采用读写分离的方式，可以实现<code>更高的并发访问</code>。同时，我们还能对从服务器进行<code>负载均衡</code>，让不同的读请求按照策略均匀地分发到不同的从服务器上，让<code>读取更加顺畅</code>。读取顺畅的另一个原因，就是<code>减少了锁表</code>的影响，比如我们让主库负责写，当主库出现写锁的时候，不会影响到从库进行SELECT的读取。</p><p><strong>第2个作用就是数据备份。</strong> 我们通过主从复制将主库上的数据复制到从库上，相当于一种<code>热备份机制</code>，也就是在主库正常运行的情况下进行的备份，不会影响到服务。</p><p><strong>第3个作用是具有高可用性。</strong> 数据备份实际上是一种冗余的机制，通过这种冗余的方式可以换取数据库的高可用性，也就是当服务器出现故障或宕机的情况下，可以切换到从服务器上，保证服务的正常运行。</p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220715214055057.png" alt="image-20220715214055057"><h2 id="_2-主从复制的原理" tabindex="-1"><a class="header-anchor" href="#_2-主从复制的原理" aria-hidden="true">#</a> 2. 主从复制的原理</h2><p><code>Slave</code> 会从 <code>Master</code> 读取 <code>binlog</code> 来进行数据同步。</p><h3 id="_2-1-原理剖析" tabindex="-1"><a class="header-anchor" href="#_2-1-原理剖析" aria-hidden="true">#</a> 2.1 原理剖析</h3><p><strong>三个线程</strong></p><p>实际上主从同步的原理就是基于 binlog 进行数据同步的。在主从复制过程中，会基于 <code>3 个线程</code> 来操 作，一个主库线程，两个从库线程。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220715215944767.png" alt="image-20220715215944767" tabindex="0" loading="lazy"><figcaption>image-20220715215944767</figcaption></figure><p><code>二进制日志转储线程</code> （Binlog dump thread）是一个主库线程。当从库线程连接的时候， 主库可以将二进 制日志发送给从库，当主库读取事件（Event）的时候，会在 Binlog 上 <code>加锁</code> ，读取完成之后，再将锁释放掉。</p><p><code>从库 I/O 线程</code> 会连接到主库，向主库发送请求更新 Binlog。这时从库的 I/O 线程就可以读取到主库的二进制日志转储线程发送的 Binlog 更新部分，并且拷贝到本地的中继日志 （Relay log）。</p><p><code>从库 SQL 线程</code> 会读取从库中的中继日志，并且执行日志中的事件，将从库中的数据与主库保持同步。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220715220037213.png" alt="image-20220715220037213" tabindex="0" loading="lazy"><figcaption>image-20220715220037213</figcaption></figure><blockquote><p>注意：</p><p>不是所有版本的MySQL都默认开启服务器的二进制日志。在进行主从同步的时候，我们需要先检查服务器是否已经开启了二进制日志。</p><p>除非特殊指定，默认情况下从服务器会执行所有主服务器中保存的事件。也可以通过配置，使从服务器执行特定的事件。</p></blockquote><p><strong>复制三步骤</strong></p><p>步骤1： <code>Master</code> 将写操作记录到二进制日志（ <code>binlog</code> ）。</p><p>步骤2： <code>Slave</code> 将 <code>Master</code> 的binary log events拷贝到它的中继日志（ <code>relay log</code> ）；</p><p>步骤3： <code>Slave</code> 重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL复制是异步的且串行化的，而且重启后从 <code>接入点</code> 开始复制。</p><p><strong>复制的问题</strong></p><p>复制的最大问题： <code>延时</code></p><h3 id="_2-2-复制的基本原则" tabindex="-1"><a class="header-anchor" href="#_2-2-复制的基本原则" aria-hidden="true">#</a> 2.2 复制的基本原则</h3><ul><li>每个 <code>Slave</code> 只有一个 <code>Master</code></li><li>每个 <code>Slave</code> 只能有一个唯一的服务器ID</li><li>每个 <code>Master</code> 可以有多个 <code>Slave</code></li></ul><h2 id="_3-一主一从架构搭建" tabindex="-1"><a class="header-anchor" href="#_3-一主一从架构搭建" aria-hidden="true">#</a> 3. 一主一从架构搭建</h2><p>一台 <code>主机</code> 用于处理所有 <code>写请求</code> ，一台 <code>从机</code> 负责所有 <code>读请求</code> ，架构图如下:</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220715220852836.png" alt="image-20220715220852836" tabindex="0" loading="lazy"><figcaption>image-20220715220852836</figcaption></figure><h3 id="_3-1-准备工作" tabindex="-1"><a class="header-anchor" href="#_3-1-准备工作" aria-hidden="true">#</a> 3.1 准备工作</h3><p>1、准备 2台 CentOS 虚拟机 （具体设置内容在P192）</p><p>2、每台虚拟机上需要安装好MySQL (可以是MySQL8.0 )</p><p>说明：前面我们讲过如何克隆一台CentOS。大家可以在一台CentOS上安装好MySQL，进而通过克隆的方式复制出1台包含MySQL的虚拟机。</p><p>注意：克隆的方式需要修改新克隆出来主机的：① <code>MAC地址</code> ② <code>hostname</code> ③<code> IP 地址</code> ④ <code>UUID</code> 。</p><p>此外，克隆的方式生成的虚拟机（包含MySQL Server），则克隆的虚拟机MySQL Server的UUID相同，必须修改，否则在有些场景会报错。比如： <code>show slave status\\G</code> ，报如下的错误：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have
equal MySQL server UUIDs; these UUIDs must be different for replication to work.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改MySQL Server 的UUID方式：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>vim /var/lib/mysql/auto.cnf

systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-主机配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-主机配置文件" aria-hidden="true">#</a> 3.2 主机配置文件</h3><p>建议mysql版本一致且后台以服务运行，主从所有配置项都配置在 <code>[mysqld]</code> 节点下，且都是小写字母。</p><p>具体参数配置如下：</p><ul><li>必选</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#[必须]主服务器唯一ID</span>
<span class="token key attr-name">server-id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>

<span class="token comment">#[必须]启用二进制日志,指名路径。比如：自己本地的路径/log/mysqlbin</span>
<span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">atguigu-bin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可选</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#[可选] 0（默认）表示读写（主机），1表示只读（从机）</span>
<span class="token key attr-name">read-only</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>

<span class="token comment">#设置日志文件保留的时长，单位是秒</span>
<span class="token key attr-name">binlog_expire_logs_seconds</span><span class="token punctuation">=</span><span class="token value attr-value">6000</span>

<span class="token comment">#控制单个二进制日志大小。此参数的最大和默认值是1GB</span>
<span class="token key attr-name">max_binlog_size</span><span class="token punctuation">=</span><span class="token value attr-value">200M</span>

<span class="token comment">#[可选]设置不要复制的数据库</span>
<span class="token key attr-name">binlog-ignore-db</span><span class="token punctuation">=</span><span class="token value attr-value">test</span>

<span class="token comment">#[可选]设置需要复制的数据库,默认全部记录。比如：binlog-do-db=atguigu_master_slave</span>
<span class="token key attr-name">binlog-do-db</span><span class="token punctuation">=</span><span class="token value attr-value">需要复制的主数据库名字</span>

<span class="token comment">#[可选]设置binlog格式</span>
<span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">STATEMENT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意：</p><p>先搭建完主从复制，再创建数据库。</p><p>MySQL主从复制起始时，从机不继承主机数据。</p></blockquote><p><strong>① binlog格式设置：</strong></p><p>格式1： <code>STATEMENT模式</code> （基于SQL语句的复制(statement-based replication, SBR)）</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">STATEMENT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每一条会修改数据的sql语句会记录到binlog中。这是默认的binlog格式。</p><ul><li>SBR 的优点： <ul><li>历史悠久，技术成熟</li><li>不需要记录每一行的变化，减少了binlog日志量，文件较小</li><li>binlog中包含了所有数据库更改信息，可以据此来审核数据库的安全等情况</li><li>binlog可以用于实时的还原，而不仅仅用于复制</li><li>主从版本可以不一样，从服务器版本可以比主服务器版本高</li></ul></li><li>SBR 的缺点： <ul><li>不是所有的UPDATE语句都能被复制，尤其是包含不确定操作的时候</li></ul></li><li>使用以下函数的语句也无法被复制：LOAD_FILE()、UUID()、USER()、FOUND_ROWS()、SYSDATE() (除非启动时启用了 --sysdate-is-now 选项) <ul><li>INSERT ... SELECT 会产生比 RBR 更多的行级锁</li><li>复制需要进行全表扫描(WHERE 语句中没有使用到索引)的 UPDATE 时，需要比 RBR 请求更多的行级锁</li><li>对于有 AUTO_INCREMENT 字段的 InnoDB表而言，INSERT 语句会阻塞其他 INSERT 语句</li><li>对于一些复杂的语句，在从服务器上的耗资源情况会更严重，而 RBR 模式下，只会对那个发 生变化的记录产生影响</li><li>执行复杂语句如果出错的话，会消耗更多资源</li><li>数据表必须几乎和主服务器保持一致才行，否则可能会导致复制出错</li></ul></li></ul><p><strong>② ROW模式（基于行的复制(row-based replication, RBR)）</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">ROW</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.1.5版本的MySQL才开始支持，不记录每条sql语句的上下文信息，仅记录哪条数据被修改了，修改成什么样了。</p><ul><li>RBR 的优点： <ul><li>任何情况都可以被复制，这对复制来说是最 <code>安全可靠</code> 的。（比如：不会出现某些特定情况下 的存储过程、function、trigger的调用和触发无法被正确复制的问题）</li><li>多数情况下，从服务器上的表如果有主键的话，复制就会快了很多</li><li>复制以下几种语句时的行锁更少：INSERT ... SELECT、包含 AUTO_INCREMENT 字段的 INSERT、 没有附带条件或者并没有修改很多记录的 UPDATE 或 DELETE 语句</li><li>执行 INSERT，UPDATE，DELETE 语句时锁更少</li><li>从服务器上采用 多线程 来执行复制成为可能</li></ul></li><li>RBR 的缺点： <ul><li>binlog 大了很多</li><li>复杂的回滚时 binlog 中会包含大量的数据</li><li>主服务器上执行 UPDATE 语句时，所有发生变化的记录都会写到 binlog 中，而 SBR 只会写一次，这会导致频繁发生 binlog 的并发写问题</li><li>无法从 binlog 中看到都复制了些什么语句</li></ul></li></ul><p><strong>③ MIXED模式（混合模式复制(mixed-based replication, MBR)）</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">MIXED</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p><p>在Mixed模式下，一般的语句修改使用statment格式保存binlog。如一些函数，statement无法完成主从复制的操作，则采用row格式保存binlog。</p><p>MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。</p><h3 id="_3-3-从机配置文件" tabindex="-1"><a class="header-anchor" href="#_3-3-从机配置文件" aria-hidden="true">#</a> 3.3 从机配置文件</h3><p>要求主从所有配置项都配置在 <code>my.cnf</code> 的 <code>[mysqld]</code> 栏位下，且都是小写字母。</p><ul><li><p>必选</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#[必须]从服务器唯一ID
server-id=2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可选</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#[可选]启用中继日志
relay-log=mysql-relay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意：主从机都关闭防火墙<br> service iptables stop #CentOS 6<br> systemctl stop firewalld.service #CentOS 7</p></blockquote><h3 id="_3-4-主机-建立账户并授权" tabindex="-1"><a class="header-anchor" href="#_3-4-主机-建立账户并授权" aria-hidden="true">#</a> 3.4 主机：建立账户并授权</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#在主机MySQL里执行授权主从复制的命令
GRANT REPLICATION SLAVE ON *.* TO &#39;slave1&#39;@&#39;从机器数据库IP&#39; IDENTIFIED BY &#39;abc123&#39;; #5.5,5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：如果使用的是MySQL8，需要如下的方式建立账户，并授权slave:</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE USER &#39;slave1&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;

GRANT REPLICATION SLAVE ON *.* TO &#39;slave1&#39;@&#39;%&#39;;

#此语句必须执行。否则见下面。
ALTER USER &#39;slave1&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;

flush privileges;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在从机执行show slave status\\G时报错：</p><p>Last_IO_Error: error connecting to master &#39;slave1@192.168.1.150:3306&#39; - retry-time: 60 retries: 1 message:</p><p>Authentication plugin &#39;caching_sha2_password&#39; reported error: Authentication requires secure connection.</p></blockquote><p>查询Master的状态，并记录下File和Position的值。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show master status;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718140722740.png" alt="image-20220718140722740" tabindex="0" loading="lazy"><figcaption>image-20220718140722740</figcaption></figure><ul><li>记录下File和Position的值</li></ul><blockquote><p>注意：执行完此步骤后<strong>不要再操作主服务器MySQL</strong>，防止主服务器状态值变化。</p></blockquote><h3 id="_3-5-从机-配置需要复制的主机" tabindex="-1"><a class="header-anchor" href="#_3-5-从机-配置需要复制的主机" aria-hidden="true">#</a> 3.5 从机：配置需要复制的主机</h3><p><strong>步骤1</strong> 从机上复制主机的命令</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CHANGE MASTER TO
MASTER_HOST=&#39;主机的IP地址&#39;,
MASTER_USER=&#39;主机用户名&#39;,
MASTER_PASSWORD=&#39;主机用户名的密码&#39;,
MASTER_LOG_FILE=&#39;mysql-bin.具体数字&#39;,
MASTER_LOG_POS=具体值;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CHANGE MASTER TO
MASTER_HOST=&#39;192.168.1.150&#39;,MASTER_USER=&#39;slave1&#39;,MASTER_PASSWORD=&#39;123456&#39;,MASTER_LOG_F
ILE=&#39;atguigu-bin.000007&#39;,MASTER_LOG_POS=154;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718140946747.png" alt="image-20220718140946747" tabindex="0" loading="lazy"><figcaption>image-20220718140946747</figcaption></figure><p><strong>步骤2：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#启动slave同步
START SLAVE;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718141825228.png" alt="image-20220718141825228" tabindex="0" loading="lazy"><figcaption>image-20220718141825228</figcaption></figure><p>如果报错：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718141841862.png" alt="image-20220718141841862" tabindex="0" loading="lazy"><figcaption>image-20220718141841862</figcaption></figure><p>可以执行如下操作，删除之前的relay_log信息。然后重新执行 CHANGE MASTER TO ...语句即可。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; reset slave; #删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着，查看同步状态：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW SLAVE STATUS\\G;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718141951374.png" alt="image-20220718141951374" tabindex="0" loading="lazy"><figcaption>image-20220718141951374</figcaption></figure><blockquote><p>上面两个参数都是Yes，则说明主从配置成功！</p></blockquote><p>显式如下的情况，就是不正确的。可能错误的原因有：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 网络不通
2. 账户密码错误
3. 防火墙
4. mysql配置文件问题
5. 连接服务器时语法
6. 主服务器mysql权限
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718142045114.png" alt="image-20220718142045114" style="zoom:80%;"><h3 id="_3-6-测试" tabindex="-1"><a class="header-anchor" href="#_3-6-测试" aria-hidden="true">#</a> 3.6 测试</h3><p>主机新建库、新建表、insert记录，从机复制：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE DATABASE atguigu_master_slave;

CREATE TABLE mytbl(id INT,NAME VARCHAR(16));

INSERT INTO mytbl VALUES(1, &#39;zhang3&#39;);

INSERT INTO mytbl VALUES(2,@@hostname);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-停止主从同步" tabindex="-1"><a class="header-anchor" href="#_3-7-停止主从同步" aria-hidden="true">#</a> 3.7 停止主从同步</h3><ul><li><p>停止主从同步命令：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>stop slave;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如何重新配置主从</p><p>如果停止从服务器复制功能，再使用需要重新配置主从。否则会报错如下：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718142549168.png" alt="image-20220718142549168" tabindex="0" loading="lazy"><figcaption>image-20220718142549168</figcaption></figure></li></ul><p>重新配置主从，需要在从机上执行：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>stop slave;

reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-后续" tabindex="-1"><a class="header-anchor" href="#_3-8-后续" aria-hidden="true">#</a> 3.8 后续</h3><p><strong>搭建主从复制：双主双从</strong></p><p>一个主机m1用于处理所有写请求，它的从机s1和另一台主机m2还有它的从机s2负责所有读请求。当m1主机宕机后，m2主机负责写请求，m1、m2互为备机。结构图如下：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718143705843.png" alt="image-20220718143705843" tabindex="0" loading="lazy"><figcaption>image-20220718143705843</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718143716620.png" alt="image-20220718143716620" tabindex="0" loading="lazy"><figcaption>image-20220718143716620</figcaption></figure><h2 id="_4-同步数据一致性问题" tabindex="-1"><a class="header-anchor" href="#_4-同步数据一致性问题" aria-hidden="true">#</a> 4. 同步数据一致性问题</h2><p><strong>主从同步的要求：</strong></p><ul><li>读库和写库的数据一致(最终一致)；</li><li>写数据必须写到写库；</li><li>读数据必须到读库(不一定)；</li></ul><h3 id="_4-1-理解主从延迟问题" tabindex="-1"><a class="header-anchor" href="#_4-1-理解主从延迟问题" aria-hidden="true">#</a> 4.1 理解主从延迟问题</h3><p>进行主从同步的内容是二进制日志，它是一个文件，在进行 <code>网络传输</code> 的过程中就一定会 <code>存在主从延迟</code> （比如 500ms），这样就可能造成用户在从库上读取的数据不是最新的数据，也就是主从同步中的 <code>数据不一致性</code> 问题。</p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718144051094.png" alt="image-20220718144051094"><h3 id="_4-2-主从延迟问题原因" tabindex="-1"><a class="header-anchor" href="#_4-2-主从延迟问题原因" aria-hidden="true">#</a> 4.2 主从延迟问题原因</h3><p>在网络正常的时候，日志从主库传给从库所需的时间是很短的，即T2-T1的值是非常小的。即，网络正常情况下，主备延迟的主要来源是备库接收完binlog和执行完这个事务之间的时间差。</p><p><strong>主备延迟最直接的表现是，从库消费中继日志（relay log）的速度，比主库生产binlog的速度要慢。</strong> 造成原因：</p><p>1、从库的机器性能比主库要差</p><p>2、从库的压力大</p><p>3、大事务的执行</p><p><strong>举例1</strong> 一次性用delete语句删除太多数据</p><p>结论：后续再删除数据的时候，要控制每个事务删除的数据量，分成多次删除。</p><p><strong>举例2</strong> 一次性用insert...select插入太多数据</p><p><strong>举例3</strong> 大表DDL</p><p>比如在主库对一张500W的表添加一个字段耗费了10分钟，那么从节点上也会耗费10分钟。</p><h3 id="_4-3-如何减少主从延迟" tabindex="-1"><a class="header-anchor" href="#_4-3-如何减少主从延迟" aria-hidden="true">#</a> 4.3 如何减少主从延迟</h3><p>若想要减少主从延迟的时间，可以采取下面的办法：</p><ol><li>降低多线程大事务并发的概率，优化业务逻辑</li><li>优化SQL，避免慢SQL， <code>减少批量操作</code> ，建议写脚本以update-sleep这样的形式完成。</li><li><code>提高从库机器的配置</code> ，减少主库写binlog和从库读binlog的效率差。</li><li>尽量采用 <code>短的链路</code> ，也就是主库和从库服务器的距离尽量要短，提升端口带宽，减少binlog传输的网络延时。</li><li>实时性要求的业务读强制走主库，从库只做灾备，备份。</li></ol><h3 id="_4-4-如何解决一致性问题" tabindex="-1"><a class="header-anchor" href="#_4-4-如何解决一致性问题" aria-hidden="true">#</a> 4.4 如何解决一致性问题</h3><p>如果操作的数据存储在同一个数据库中，那么对数据进行更新的时候，可以对记录加写锁，这样在读取的时候就不会发生数据不一致的情况。但这时从库的作用就是 <code>备份</code> ，并没有起到 <code>读写分离</code> ，分担主库 <code>读压力</code> 的作用。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718144341584.png" alt="image-20220718144341584" tabindex="0" loading="lazy"><figcaption>image-20220718144341584</figcaption></figure><p>读写分离情况下，解决主从同步中数据不一致的问题， 就是解决主从之间 <code>数据复制方式</code> 的问题，如果按照数据一致性 <code>从弱到强</code> 来进行划分，有以下 3 种复制方式。</p><h4 id="方法-1-异步复制" tabindex="-1"><a class="header-anchor" href="#方法-1-异步复制" aria-hidden="true">#</a> 方法 1：异步复制</h4><p>异步模式就是客户端提交 COMMIT 之后不需要等从库返回任何结果，而是直接将结果返回给客户端，这样做的好处是不会影响主库写的效率，但可能会存在主库宕机，而Binlog还没有同步到从库的情况，也就是此时的主库和从库数据不一致。这时候从从库中选择一个作为新主，那么新主则可能缺少原来主服务器中已提交的事务。所以，这种复制模式下的数据一致性是最弱的。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718144410731.png" alt="image-20220718144410731" tabindex="0" loading="lazy"><figcaption>image-20220718144410731</figcaption></figure><h4 id="方法-2-半同步复制" tabindex="-1"><a class="header-anchor" href="#方法-2-半同步复制" aria-hidden="true">#</a> 方法 2：半同步复制</h4><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718144926758.png" alt="image-20220718144926758"><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718144958357.png" alt="image-20220718144958357" tabindex="0" loading="lazy"><figcaption>image-20220718144958357</figcaption></figure><h4 id="方法-3-组复制" tabindex="-1"><a class="header-anchor" href="#方法-3-组复制" aria-hidden="true">#</a> 方法 3：组复制</h4><p>异步复制和半同步复制都无法最终保证数据的一致性问题，半同步复制是通过判断从库响应的个数来决定是否返回给客户端，虽然数据一致性相比于异步复制有提升，但仍然无法满足对数据一致性要求高的场景，比如金融领域。MGR 很好地弥补了这两种复制模式的不足。</p><p>组复制技术，简称 MGR（MySQL Group Replication）。是 MySQL 在 5.7.17 版本中推出的一种新的数据复制技术，这种复制技术是基于 Paxos 协议的状态机复制。</p><p><strong>MGR 是如何工作的</strong></p><p>首先我们将多个节点共同组成一个复制组，在 <code>执行读写（RW）事务</code> 的时候，需要通过一致性协议层 （Consensus 层）的同意，也就是读写事务想要进行提交，必须要经过组里“大多数人”（对应 Node 节 点）的同意，大多数指的是同意的节点数量需要大于 （N/2+1），这样才可以进行提交，而不是原发起方一个说了算。而针对 <code>只读（RO）事务</code> 则不需要经过组内同意，直接 COMMIT 即可。</p><p>在一个复制组内有多个节点组成，它们各自维护了自己的数据副本，并且在一致性协议层实现了原子消 息和全局有序消息，从而保证组内数据的一致性。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718145235499.png" alt="image-20220718145235499" tabindex="0" loading="lazy"><figcaption>image-20220718145235499</figcaption></figure><p>MGR 将 MySQL 带入了数据强一致性的时代，是一个划时代的创新，其中一个重要的原因就是MGR 是基 于 Paxos 协议的。Paxos 算法是由 2013 年的图灵奖获得者 Leslie Lamport 于 1990 年提出的，有关这个算法的决策机制可以搜一下。事实上，Paxos 算法提出来之后就作为 <code>分布式一致性算法</code> 被广泛应用，比如 Apache 的 ZooKeeper 也是基于 Paxos 实现的。</p><h2 id="_5-知识延伸" tabindex="-1"><a class="header-anchor" href="#_5-知识延伸" aria-hidden="true">#</a> 5. 知识延伸</h2><p>在主从架构的配置中，如果想要采取读写分离的策略，我们可以<code> 自己编写程序</code> ，也可以通过 <code>第三方的中间件</code> 来实现。</p><ul><li>自己编写程序的好处就在于比较自主，我们可以自己判断哪些查询在从库上来执行，针对实时性要 求高的需求，我们还可以考虑哪些查询可以在主库上执行。同时，程序直接连接数据库，减少了中间件层，相当于减少了性能损耗。</li><li>采用中间件的方法有很明显的优势，<code> 功能强大</code> ， <code>使用简单</code> 。但因为在客户端和数据库之间增加了 中间件层会有一些 <code>性能损耗</code> ，同时商业中间件也是有使用成本的。我们也可以考虑采取一些优秀的开源工具。</li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718145428456.png" alt="image-20220718145428456" tabindex="0" loading="lazy"><figcaption>image-20220718145428456</figcaption></figure><p>① <code>Cobar</code> 属于阿里B2B事业群，始于2008年，在阿里服役3年多，接管3000+个MySQL数据库的 schema,集群日处理在线SQL请求50亿次以上。由于Cobar发起人的离职，Cobar停止维护。</p><p>② <code>Mycat</code> 是开源社区在阿里cobar基础上进行二次开发，解决了cobar存在的问题，并且加入了许 多新的功能在其中。青出于蓝而胜于蓝。</p><p>③ <code>OneProxy</code> 基于MySQL官方的proxy思想利用c语言进行开发的，OneProxy是一款商业 收费 的中 间件。舍弃了一些功能，专注在 性能和稳定性上 。</p><p>④ <code>kingshard</code> 由小团队用go语言开发，还需要发展，需要不断完善。</p><p>⑤ <code>Vitess</code> 是Youtube生产在使用，架构很复杂。不支持MySQL原生协议，使用 需要大量改造成 本 。</p><p>⑥ <code>Atlas</code> 是360团队基于mysql proxy改写，功能还需完善，高并发下不稳定。</p><p>⑦ <code>MaxScale</code> 是mariadb（MySQL原作者维护的一个版本） 研发的中间件</p><p>⑧ <code>MySQLRoute</code> 是MySQL官方Oracle公司发布的中间件</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718145523643.png" alt="image-20220718145523643" tabindex="0" loading="lazy"><figcaption>image-20220718145523643</figcaption></figure><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718145534856.png" alt="image-20220718145534856" tabindex="0" loading="lazy"><figcaption>image-20220718145534856</figcaption></figure><p>主备切换：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220718145548526.png" alt="image-20220718145548526" tabindex="0" loading="lazy"><figcaption>image-20220718145548526</figcaption></figure><ul><li>主动切换</li><li>被动切换</li><li>如何判断主库出问题了？如何解决过程中的数据不一致性问题 ?</li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,175);function v(h,b){const i=s("ExternalLinkIcon");return l(),d("div",null,[e("div",t,[p,e("p",null,[g,a(": 以下所有文章整理于B站宋红康老师的《MySQL数据库入门到大牛》。"),e("a",m,[a("MySQL"),o(i)])])]),u])}const S=n(r,[["render",v],["__file","master-slave-replication.html.vue"]]);export{S as default};
