import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-8d307529.js";const e={},p=t(`<h2 id="_1-什么是事务" tabindex="-1"><a class="header-anchor" href="#_1-什么是事务" aria-hidden="true">#</a> 1. 什么是事务</h2><p><strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。</strong></p><p>相信大家应该都能背上面这句话了，下面我结合我们日常的真实开发来谈一谈。</p><p>我们系统的每个业务方法可能包括了多个原子性的数据库操作，比如下面的 <code>save()</code> 方法中就有两个原子性的数据库操作。这些原子性的数据库操作是有依赖的，它们要么都执行，要不就都不执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		personDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		personDetailDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>studentDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，需要格外注意的是：<strong>事务能否生效数据库引擎是否支持事务是关键。比如常用的 MySQL 数据库默认使用支持事务的 <code>innodb</code>引擎。但是，如果把数据库引擎变为 <code>myisam</code>，那么程序也就不再支持事务了</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>事务是保证业务操作完整性的一种数据库机制。

事务的4特点： A C I D
<span class="token list punctuation">1.</span> A(Atomicity) 	原子性 
<span class="token list punctuation">2.</span> C(Consistency) 	一致性
<span class="token list punctuation">3.</span> I(Isolation)		隔离性
<span class="token list punctuation">4.</span> D(durability) 	持久性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>原子性</strong>（<code>Atomicity</code>）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性</strong>（<code>Consistency</code>）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li><li><strong>隔离性</strong>（<code>Isolation</code>）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性</strong>（<code>Durability</code>）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><p>🌈：<strong>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308282028921.png" alt="image-20230828202040602" tabindex="0" loading="lazy"><figcaption>image-20230828202040602</figcaption></figure><h2 id="_2-spring对事务的支持" tabindex="-1"><a class="header-anchor" href="#_2-spring对事务的支持" aria-hidden="true">#</a> 2. Spring对事务的支持</h2><h3 id="spring支持的两种事务管理" tabindex="-1"><a class="header-anchor" href="#spring支持的两种事务管理" aria-hidden="true">#</a> Spring支持的两种事务管理</h3><h4 id="_3-1-编程式事务管理" tabindex="-1"><a class="header-anchor" href="#_3-1-编程式事务管理" aria-hidden="true">#</a> 3.1 编程式事务管理</h4><p>通过 <code>TransactionTemplate</code>或者<code>TransactionManager</code>手动管理事务，实际应用中很少使用。</p><p>使用<code>TransactionTemplate</code> 进行编程式事务管理的示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> transactionStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>

                    <span class="token comment">// ....  业务代码</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//回滚</span>
                    transactionStatus<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>TransactionManager</code> 进行编程式事务管理的示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">PlatformTransactionManager</span> transactionManager<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
               <span class="token comment">// ....  业务代码</span>
              transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-声明式事务管理" tabindex="-1"><a class="header-anchor" href="#_3-2-声明式事务管理" aria-hidden="true">#</a> 3.2 声明式事务管理</h4><p>这一种方式实际上比较推荐的，实际是通过 AOP 实现（基于<code>@Transactional</code> 的全注解方式使用最多）。</p><p>使用 <code>@Transactional</code>注解进行事务管理的示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/** 做业务**/</span>
        <span class="token class-name">MethodOne</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MethodOne</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mb<span class="token punctuation">.</span><span class="token function">bMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mc<span class="token punctuation">.</span><span class="token function">cMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring主要通过以下三个接口对事务进行管理</p><ul><li><strong><code>PlatformTransactionManager</code></strong>：（平台）事务管理器，Spring 事务策略的核心。</li><li><strong><code>TransactionDefinition</code></strong>：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。</li><li><strong><code>TransactionStatus</code></strong>：事务运行状态。</li></ul><p>我们可以把 <strong><code>PlatformTransactionManager</code></strong> 接口可以被看作是事务上层的管理者，而 <strong><code>TransactionDefinition</code></strong> 和 <strong><code>TransactionStatus</code></strong> 这两个接口可以看作是事务的描述。</p><p><strong><code>PlatformTransactionManager</code></strong> 会根据 <strong><code>TransactionDefinition</code></strong> 的定义比如事务超时时间、隔离级别、传播行为等来进行事务管理 ，而 <strong><code>TransactionStatus</code></strong> 接口则提供了一些方法来获取事务相应的状态比如是否新事务、是否可以回滚等等。</p><h5 id="_1-platformtransactionmanager" tabindex="-1"><a class="header-anchor" href="#_1-platformtransactionmanager" aria-hidden="true">#</a> 1. PlatformTransactionManager</h5><p>简称<strong>事务管理接口</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308282008683.png" alt="image-20230828200844565" tabindex="0" loading="lazy"><figcaption>image-20230828200844565</figcaption></figure><p><code>PlatformTransactionManager</code>接口中定义了三个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token punctuation">{</span>
    <span class="token comment">//获得事务</span>
    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionDefinition</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
    <span class="token comment">//提交事务</span>
    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
    <span class="token comment">//回滚事务</span>
    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-transactiondefinition" tabindex="-1"><a class="header-anchor" href="#_2-transactiondefinition" aria-hidden="true">#</a> 2. TransactionDefinition</h5><p>简称<strong>事务属性</strong></p><p>事务管理器接口 <strong><code>PlatformTransactionManager</code></strong> 通过 <strong><code>getTransaction(TransactionDefinition definition)</code></strong> 方法来得到一个事务，这个方法里面的参数是 <strong><code>TransactionDefinition</code></strong> 类 ，这个类就定义了一些基本的事务属性。</p><p><strong>什么是事务属性呢？</strong> 事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。</p><p>事务属性包含了 5 个方面：</p><ul><li>隔离级别</li><li>传播行为</li><li>回滚规则</li><li>是否只读</li><li>事务超时</li></ul><p><code>TransactionDefinition</code> 接口中定义了 5 个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRED</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_SUPPORTS</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_MANDATORY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRES_NEW</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NOT_SUPPORTED</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NEVER</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NESTED</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_UNCOMMITTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_COMMITTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_REPEATABLE_READ</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_SERIALIZABLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">TIMEOUT_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回事务的传播行为，默认值为 REQUIRED。</span>
    <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回事务的隔离级别，默认值是 DEFAULT</span>
    <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</span>
    <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回是否为只读事务，默认值为 false</span>
    <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-transactionstatus" tabindex="-1"><a class="header-anchor" href="#_3-transactionstatus" aria-hidden="true">#</a> 3. TransactionStatus</h5><p>简称<strong>事务状态</strong></p><p><code>TransactionStatus</code>接口用来记录事务的状态 该接口定义了一组方法,用来获取或判断事务的相应状态信息。</p><p><code>PlatformTransactionManager.getTransaction(…)</code>方法返回一个 <code>TransactionStatus</code> 对象。</p><p><strong>TransactionStatus 接口内容如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span><span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否是新的事务</span>
    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否有恢复点</span>
    <span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置为只回滚</span>
    <span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否为只回滚</span>
    <span class="token keyword">boolean</span> isCompleted<span class="token punctuation">;</span> <span class="token comment">// 是否已完成</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring对事务的支持" tabindex="-1"><a class="header-anchor" href="#spring对事务的支持" aria-hidden="true">#</a> Spring对事务的支持</h3><blockquote><p>⚠️ 再提醒一次：你的程序是否支持事务首先取决于数据库 ，比如使用 MySQL 的话，如果你选择的是 innodb 引擎，那么恭喜你，是可以支持事务的。</p><p>但是，如果你的 MySQL 数据库使用的是 myisam 引擎的话，那不好意思，从根上就是不支持事务的。</p></blockquote><p><strong>MySQL 怎么保证原子性的？</strong></p><p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行<strong>回滚</strong>，在 MySQL 中，恢复机制是通过 <strong>回滚日志（undo log）</strong> 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 <strong>回滚日志</strong> 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚之前未完成的事务。</p><h3 id="spring对事务控制" tabindex="-1"><a class="header-anchor" href="#spring对事务控制" aria-hidden="true">#</a> Spring对事务控制</h3><blockquote><p>JDBC:<br> Connection.setAutoCommit(false);Connection.commit(); Connection.rollback();</p><p>Mybatis：</p><pre><code>Mybatis自动开启事务
</code></pre><p>​ sqlSession(Connection).commit();<br> ​ sqlSession(Connection).rollback();</p><p>结论：控制事务的底层 都是Connection对象完成的。</p></blockquote><h2 id="_3-spring控制事务的开发步骤" tabindex="-1"><a class="header-anchor" href="#_3-spring控制事务的开发步骤" aria-hidden="true">#</a> 3. Spring控制事务的开发步骤：</h2><p>Spring是通过AOP的方式进行事务的开发、</p><h3 id="_3-1-目标对象" tabindex="-1"><a class="header-anchor" href="#_3-1-目标对象" aria-hidden="true">#</a> 3.1 目标对象</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>public class XXXUserServiceImpl{
   private xxxDAO xxxDAO
   set get

   <span class="token list punctuation">1.</span> 原始对象 ---》 原始方法 ---》核心功能 (业务处理+DAO调用)
   <span class="token list punctuation">2.</span> DAO作为Service的成员变量，依赖注入的方式进行赋值
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-额外功能" tabindex="-1"><a class="header-anchor" href="#_3-2-额外功能" aria-hidden="true">#</a> 3.2 额外功能</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> org.springframework.jdbc.datasource.DataSourceTransactionManager
<span class="token list punctuation">2.</span> 注入DataSource 
<span class="token list punctuation">1.</span> MethodInterceptor
   public Object invoke(MethodInvocation invocation){
   	  //原理：
      try{
        Connection.setAutoCommit(false);
        Object ret = invocation.proceed();
        Connection.commit();
      }catch(Exception e){
        Connection.rollback();
      }
        return ret;
   }
<span class="token list punctuation">2.</span> @Aspect
   @Around 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-切入点" tabindex="-1"><a class="header-anchor" href="#_3-3-切入点" aria-hidden="true">#</a> 3.3 切入点</h3><blockquote><p>@Transactional</p><p>事务的额外功能加入给哪些业务方法。</p><ol><li>类上：类中所有的方法都会加入事务</li><li>方法上：这个方法会加入事务</li></ol></blockquote><h3 id="_3-4-组装切面" tabindex="-1"><a class="header-anchor" href="#_3-4-组装切面" aria-hidden="true">#</a> 3.4 组装切面</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 切入点
<span class="token list punctuation">2.</span> 额外功能

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-spring控制事务的真实编码" tabindex="-1"><a class="header-anchor" href="#_4-spring控制事务的真实编码" aria-hidden="true">#</a> 4. Spring控制事务的真实编码：</h2><ul><li><p>搭建开发环境：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.14.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 原始对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.baizhiedu.service.UserServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDAO<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDAO<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--DataSourceTransactionManager--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSourceTransactionManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 需要Connection 而Connection又在dataSource里 --&gt;</span>
 	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

@Transactional
public class UserServiceImpl implements UserService {
    private UserDAO userDAO;
<span class="token comment">&lt;!-- 告诉Spring开启基于注解的事务管理 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSourceTransactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>细节：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSourceTransactionManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
进行动态代理底层实现的切换   proxy-target-class
	默认	false JDK
		 true  Cglib 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-spring的事务属性" tabindex="-1"><a class="header-anchor" href="#_5-spring的事务属性" aria-hidden="true">#</a> 5. Spring的事务属性</h2><p>事务属性简称 <strong>Transaction Attribute</strong></p><h3 id="_5-1-什么是事务属性" tabindex="-1"><a class="header-anchor" href="#_5-1-什么是事务属性" aria-hidden="true">#</a> 5.1 什么是事务属性？</h3><blockquote><p>属性：描述物体特征的一系列值</p><p>性别 身高 体重 ...</p><p>事务属性：描述事务特征的一系列值</p><ol><li>隔离属性</li><li>传播属性</li><li>只读属性</li><li>超时属性</li><li>异常属性</li></ol></blockquote><h3 id="_5-2-如何添加事务属性" tabindex="-1"><a class="header-anchor" href="#_5-2-如何添加事务属性" aria-hidden="true">#</a> 5.2 如何添加事务属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isloation<span class="token operator">=</span><span class="token punctuation">,</span>propagation<span class="token operator">=</span><span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">,</span>rollbackFor<span class="token operator">=</span><span class="token punctuation">,</span>noRollbackFor<span class="token operator">=</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-事务属性详解" tabindex="-1"><a class="header-anchor" href="#_5-3-事务属性详解" aria-hidden="true">#</a> 5.3 事务属性详解</h3><h4 id="_1-隔离属性-isolation" tabindex="-1"><a class="header-anchor" href="#_1-隔离属性-isolation" aria-hidden="true">#</a> 1. 隔离属性 (ISOLATION)</h4><ul><li><p>隔离属性的概念</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>概念：他描述了事务解决并发问题的特征
<span class="token list punctuation">1.</span> 什么是并发
       多个事务(用户)在同一时间，访问操作了相同的数据
       
<span class="token code keyword">       同一时间：0.000几秒 微小前 微小后</span>
<span class="token list punctuation">2.</span> 并发会产生那些问题
       <span class="token list punctuation">1.</span> 脏读
       <span class="token list punctuation">2.</span> 不可重复读
       <span class="token list punctuation">3.</span> 幻影读
<span class="token list punctuation">3.</span> 并发问题如何解决
       通过隔离属性解决，隔离属性中设置不同的值，解决并发处理过程中的问题。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事务并发会产生的问题</p><ul><li><p>脏读</p><blockquote><p>一个事务，读取了另一个事务中没有提交的数据。会在本事务中产生数据不一致的问题<br> 解决方案 @Transactional(isolation=Isolation.READ_COMMITTED)</p></blockquote></li></ul></li><li><p>不可重复读</p><blockquote><p>一个事务中，多次读取相同的数据，但是读取结果不一样。会在本事务中产生数据不一致的问题</p><p>注意：1 不是脏读 2 一个事务中</p><p>解决方案 @Transactional(isolation=Isolation.REPEATABLE_READ)</p></blockquote></li></ul><blockquote><p>本质： 一把行锁</p></blockquote><ul><li><p>幻影读</p><blockquote><p>一个事务中，多次对整表进行查询统计，但是结果不一样，会在本事务中产生数据不一致的问题</p></blockquote><blockquote><p>解决方案 @Transactional(isolation=Isolation.SERIALIZABLE)</p><p>本质：表锁</p></blockquote></li><li><p>总结</p><blockquote><p>并发安全： SERIALIZABLE &gt; REPEATABLE_READ &gt; READ_COMMITTED</p></blockquote><blockquote><p>运行效率： READ_COMMITTED &gt; REPEATABLE_READ &gt; SERIALIZABLE</p></blockquote></li><li><p>数据库对于隔离属性的支持</p><table><thead><tr><th>隔离属性值</th><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>ISOLATION_READ_COMMITTED</td><td>✅</td><td>✅</td></tr><tr><td>IOSLATION_REPEATABLE_READ</td><td>✅</td><td>❎</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>✅</td><td>✅</td></tr></tbody></table><blockquote><p>Oracle不支持REPEATABLE_READ值 如何解决不可重复读?</p><p>采用的是多版本比对的方式 解决不可重复读的问题</p></blockquote></li><li><p>默认隔离属性</p><blockquote><p>ISOLATION_DEFAULT：会调用不同数据库所设置的默认隔离属性</p><p>MySQL : REPEATABLE_READ</p><p>Oracle: READ_COMMITTED</p></blockquote></li><li><p>查看数据库默认隔离属性</p><ul><li><p>MySQL</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  select @@tx_isolation;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Oracle</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment">#,</span>
     <span class="token keyword">CASE</span> BITAND<span class="token punctuation">(</span>t<span class="token punctuation">.</span>flag<span class="token punctuation">,</span> POWER<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">WHEN</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;READ COMMITTED&#39;</span>
        <span class="token keyword">ELSE</span> <span class="token string">&#39;SERIALIZABLE&#39;</span>
     <span class="token keyword">END</span> <span class="token keyword">AS</span> isolation_level
  <span class="token keyword">FROM</span> v$<span class="token keyword">transaction</span> t 
  <span class="token keyword">JOIN</span> v$<span class="token keyword">session</span> s <span class="token keyword">ON</span> t<span class="token punctuation">.</span>addr <span class="token operator">=</span> s<span class="token punctuation">.</span>taddr
  <span class="token operator">AND</span> s<span class="token punctuation">.</span>sid <span class="token operator">=</span> sys_context<span class="token punctuation">(</span><span class="token string">&#39;USERENV&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SID&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>隔离属性在实战中的建议</p><blockquote><p>推荐使用Spring指定的ISOLATION_DEFAULT</p><ol><li>MySQL repeatable_read</li><li>Oracle read_commited</li></ol><p>未来实战中，并发访问情况，很少</p><p>如果真遇到并发问题，乐观锁</p><p>Hibernate(JPA) Version</p><p>MyBatis 通过拦截器自定义开发</p></blockquote></li></ul><h4 id="_2-传播属性-propagation" tabindex="-1"><a class="header-anchor" href="#_2-传播属性-propagation" aria-hidden="true">#</a> 2. 传播属性（PROPAGATION）</h4><ul><li><p>传播属性的概念：</p><blockquote><p>概念：他描述了事务解决嵌套问题的特征</p><p>什么叫做事务的嵌套：他指的是一个大的事务中，包含了若干个小的事务</p><p>问题：大事务中融入了很多小的事务，他们彼此影响，最终就会导致外部大的事务，丧失了事务的原子性</p></blockquote></li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/cisyam/202308281551768.png" alt="image-20230828155139656" tabindex="0" loading="lazy"><figcaption>image-20230828155139656</figcaption></figure><ul><li><p>传播属性的值极其用法：</p><table><thead><tr><th>传播属性的值</th><th>外部不存在事务</th><th>外部存在事务</th><th>用法</th><th>备注</th></tr></thead><tbody><tr><td>REQUIRED</td><td>开启新的事务</td><td>融合到外部事务中</td><td>@Transactional(propagation = Propagation.REQUIRED)</td><td>增删改方法</td></tr><tr><td>SUPPORTS</td><td>不开启事务</td><td>融合到外部事务中</td><td>@Transactional(propagation = Propagation.SUPPORTS)</td><td>查询方法</td></tr><tr><td>REQUIRES_NEW</td><td>开启新的事务</td><td>挂起外部事务，创建新的事务</td><td>@Transactional(propagation = Propagation.REQUIRES_NEW)</td><td>日志记录方法中</td></tr><tr><td>NOT_SUPPORTED</td><td>不开启事务</td><td>挂起外部事务</td><td>@Transactional(propagation = Propagation.NOT_SUPPORTED)</td><td>及其不常用</td></tr><tr><td>NEVER</td><td>不开启事务</td><td>抛出异常</td><td>@Transactional(propagation = Propagation.NEVER)</td><td>及其不常用</td></tr><tr><td>MANDATORY</td><td>抛出异常</td><td>融合到外部事务中</td><td>@Transactional(propagation = Propagation.MANDATORY)</td><td>及其不常用</td></tr></tbody></table></li><li><p>默认传播属性：</p><p>Propagation.REQUIRED</p></li><li><p>推荐传播属性的使用方式</p><blockquote><p>增删改 方法：直接使用默认值REQUIRED</p><p>查询 操作：显示指定传播属性的值为SUPPORTS</p></blockquote></li></ul><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,79),o=[p];function i(c,l){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","spring5-transaction-processing.html.vue"]]);export{d as default};
