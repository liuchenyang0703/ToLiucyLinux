import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as a,d as t,e}from"./app-8d307529.js";const i={},u=e(`<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h2><p>前面文章我们学习了关于Spring的IOC与AOP相关知识点，在此之前，我们主要学习Spring的一些核心概念，<strong>IOC</strong>和<strong>AOP</strong>等等。从这篇博客开始，我们将转向跟我简洁的<strong>注解开发</strong>。我们能更加直观和简洁地定义和配置Spring组件，极大地提高开发效率。本篇主要内容介绍为Spring基础注解部分。好了，话不多说，让我们开始吧😎😎😎。</p><h2 id="_2-注解的基本概念" tabindex="-1"><a class="header-anchor" href="#_2-注解的基本概念" aria-hidden="true">#</a> 2.注解的基本概念</h2><h3 id="_2-1-什么是注解编程" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是注解编程" aria-hidden="true">#</a> 2.1 什么是注解编程</h3><p>注解编程指的是使用 <strong>注解(Annotation)</strong> 来进行编程的一种方式。注解是Java语言的一种特殊语法元素，可以在代码中添加**元数据(metadata)**来提供额外的信息，用于给编译器、解释器、工具或其他框架做指示。</p><p>使用注解可以给代码添加更多的语义信息，以便于编译器、工具或框架进行基于注解的处理。它可以用于描述类、方法、字段等的特性、行为或约束。通过注解，可以实现一些在运行时对代码进行自动化处理的功能，如代码生成、配置加载、依赖注入等。</p><p><strong>注解编程的主要特点包括：</strong></p><ol><li><strong>简化配置：</strong> 使用注解可以将一些配置信息和逻辑直接嵌入到代码中，避免了繁琐的XML配置或属性文件配置。</li><li><strong>提升开发效率：</strong> 通过使用注解，可以自动化完成一些重复性工作，减少编码工作量和错误的可能性。</li><li><strong>增强可读性和可维护性：</strong> 注解可以为代码添加更多的语义信息，使代码更加易于理解和维护。</li><li><strong>扩展性和灵活性：</strong> 注解可以根据需要进行扩展和定制，满足不同的业务需求。</li></ol><p>在Java中，注解是通过<code>@</code>符号来使用的，例如<code>@Override</code>、<code>@Autowired</code>等。Java提供了一些常用的注解，如<code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code>等。此外，开发人员还可以自定义注解来实现特定的功能和逻辑。</p><p>注解编程在很多框架和库中被广泛应用，比如Spring框架中的依赖注入、MyBatis框架中的SQL映射、JUnit测试框架中的测试标记等。通过使用注解，可以使代码更加简洁、易读和易于扩展。</p><h3 id="_2-2-为什么要学习注解编程" tabindex="-1"><a class="header-anchor" href="#_2-2-为什么要学习注解编程" aria-hidden="true">#</a> 2.2 为什么要学习注解编程</h3><ol><li><strong>简化配置：</strong> 使用注解可以大大简化Spring配置文件（如XML文件）的编写。相比于繁琐的XML配置，注解配置更加简洁、直观，减少了样板代码的编写，提高了开发效率。</li><li><strong>提高可读性：</strong> 通过使用注解，可以将配置信息直接附加在代码元素上，使得代码更加清晰、易于理解。注解可以提供更直观的描述，使得代码的意图更加明确，减少了对繁琐文档的依赖。</li><li><strong>实现依赖注入：</strong> Spring框架的核心特性之一是依赖注入（Dependency Injection，DI）。通过使用注解，可以方便地标识和注入依赖对象，减少了手动编写繁琐的依赖关系配置代码。</li><li><strong>实现面向切面编程：</strong> Spring框架还提供了面向切面编程（Aspect-Oriented Programming，AOP）的支持。通过使用注解，可以方便地定义切面和切点，实现横切关注点的模块化和复用，提高了代码的可维护性和可扩展性。</li><li><strong>整合第三方库和框架：</strong> 许多第三方库和框架都提供了与Spring集成的注解，通过学习Spring注解编程，可以更好地与这些库和框架进行整合开发，提高开发效率。</li><li><strong>跟上行业趋势：</strong> 在现代Java开发中，使用注解已经成为一种主流的编程方式。很多流行的开源框架和库都广泛使用注解，学习Spring注解编程可以帮助你更好地理解和使用这些框架，跟上行业的发展趋势。</li></ol><p>学习Spring注解编程可以使你更加高效地使用Spring框架，简化配置，提高代码的可读性和可维护性，实现依赖注入和面向切面编程等重要特性。</p><h3 id="_2-3-注解的作用" tabindex="-1"><a class="header-anchor" href="#_2-3-注解的作用" aria-hidden="true">#</a> 2.3 注解的作用</h3><p>Spring框架提供了丰富的注解，这些注解在开发中起到了很多重要的作用。以下是几个常见的Spring注解及其作用：</p><ol><li><code>@Component</code>：用于标记一个类作为Spring的组件，让Spring自动进行扫描和注册。一般与<code>@Autowired</code>配合使用，实现依赖注入。</li><li><code>@Autowired</code>：用于自动注入依赖关系，即通过类型匹配或名称匹配自动将依赖对象注入到相应的属性、构造方法或Setter方法中。</li><li><code>@Service</code>：用于标记一个类作为服务层组件，通常用于定义业务逻辑，与<code>@Component</code>功能类似。</li><li><code>@Repository</code>：用于标记一个类作为数据访问层（DAO）的组件，通常用于数据库操作，与<code>@Component</code>功能类似。</li><li><code>@Controller</code>：用于标记一个类作为控制器组件，通常用于处理用户请求，与<code>@Component</code>功能类似。</li><li><code>@RequestMapping</code>：用于映射请求URL和处理方法，指定URL路径和HTTP方法，定义请求与处理方法的映射关系。</li><li><code>@Value</code>：用于注入配置文件中的值或表达式，将属性值从配置文件中获取并注入到相应的属性中。</li><li><code>@Configuration</code>：用于标记一个类为配置类，提供配置信息，替代XML配置文件。</li><li><code>@Bean</code>：用于将方法返回的对象注册为Spring容器中的Bean。</li><li><code>@Qualifier</code>：用于指定注入的Bean的名称，用于解决自动注入时多个Bean的冲突问题。</li><li><code>@Scope</code>：用于指定Bean的作用域，包括单例（Singleton）、原型（Prototype）等。</li><li><code>@Transactional</code>：用于标记一个方法或类需要进行事务管理，确保方法的执行在事务的上下文环境中。</li></ol><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310202231380.png" alt="image-20231020223109264" tabindex="0" loading="lazy"><figcaption>image-20231020223109264</figcaption></figure><p><strong>主要还是来替换XML这种配置形式，简化配置</strong></p><p>这些注解使得我们Java程序员可以通过简单的注解配置来实现各种功能，如<strong>依赖注入</strong>、<strong>AOP切面</strong>、<strong>事务管理</strong>，<strong>日志管理</strong>等。注解的使用能够简化配置，提高开发效率，并且使代码更加清晰、易读和易于维护。同时，注解也是Spring框架实现各种功能的基础，对于深入理解和灵活应用Spring框架非常重要。</p><h3 id="_2-4-使用spring注解开发第一个问题" tabindex="-1"><a class="header-anchor" href="#_2-4-使用spring注解开发第一个问题" aria-hidden="true">#</a> 2.4 使用Spring注解开发第一个问题</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Spring基于注解进行配置后，还能否解耦合呢？

在Spring框架应用注解时，如果对注解配置的内容不满意，可以通过Spring配置文件进行覆盖的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们接着往下看，开始学习我们Spring基础注解来揭晓答案。</p><h2 id="_3-spring基础注解" tabindex="-1"><a class="header-anchor" href="#_3-spring基础注解" aria-hidden="true">#</a> 3.Spring基础注解</h2><p>本篇文章基础注解都是基于Spring2.x提供的注解</p><p>⚠️注意：这个阶段的注解，仅仅是简化XML的配置，并不能够完全替代XML配置文件</p><h3 id="_3-1-对象创建相关注解" tabindex="-1"><a class="header-anchor" href="#_3-1-对象创建相关注解" aria-hidden="true">#</a> 3.1 对象创建相关注解</h3><p><strong>搭建开发环境</strong></p><p>创建一个新的配置文件，开启扫描包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 告知Spring扫描指定包及其子包对应的注解 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop.basic.annotation<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象创建相关注解</strong></p><p>@Component</p><p>作用：替换原有spring配置文件中的bean标签</p><ol><li>class属性:<br> 传统的XML配置中，我们使用class属性来告诉Spring需要创建哪个类的实例。<br> 当使用@Component注解时，Spring通过扫描指定的包来找到所有带有此注解的类。在找到这些类后，Spring通过反射来创建它们的实例。<br><strong>因此，注解的class属性实际上是通过Spring的自动扫描和Java的反射机制隐式得到的。</strong></li><li>id属性:<br> 在XML配置中，我们通常使用id属性为bean指定一个唯一的名称。<br> 使用@Component注解时，如果没有明确指定bean的名称，Spring会使用一个默认的命名策略：将类名的首字母变为小写。例如，<strong>UserDao类的默认bean名称就是userDao。</strong></li></ol><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310211855340.png" alt="image-20231020225800040" tabindex="0" loading="lazy"><figcaption>image-20231020225800040</figcaption></figure><p><strong>细节分析：</strong></p><p>如何显示指定工厂创建对象的id值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;u&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Spring配置文件覆盖注解配置内容</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>applicationContext<span class="token punctuation">.</span>xml

<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;u&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.javatop.bean.User&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

id值 <span class="token keyword">class</span>的值 要和 注解中的设置保持一值 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义Bean ID：</strong> **@Component注解 **允许通过其属性值来自定义Bean的ID。在上述例子中，我们使用@Component(“u”)来设置Bean的ID为&quot;u&quot;。<br><strong>XML配置优先：</strong> 如果在Spring的XML配置文件中有一个与注解Bean ID相同的Bean定义，XML中的定义会覆盖注解中的定义。这提供了一个方法，使开发者可以在必要时覆盖基于注解的配置，给予了更大的灵活性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>javatop<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023-10-20 22:46
 * <span class="token keyword">@description</span> : User实体类
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;User对象被创建了.....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">&quot;, name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, email=&#39;&quot;</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>javatop<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023-10-20 22:49
 * <span class="token keyword">@description</span> : 用于测试 @Component注解
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAnnotation</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 用于测试 @Component注解
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们执行测试类之后，我们打开控制台发现：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310202305140.png" alt="image-20231020230536010" tabindex="0" loading="lazy"><figcaption>image-20231020230536010</figcaption></figure><p>我们在User对象的无参构造方法打印执行了，说明了此时User对象已经被Spring创建了，此时的**@Component**已经生效了。</p><p><strong>@Component的衍生注解</strong></p><p>注意：本质上这些衍生注解就是@Component<br> 作用 &lt;bean<br> 细节 @Service(&quot;s&quot;)</p><p>目的：增加可读性</p><p>注意：Spring整合Mybatis开发过程中 不使用@Repository @Component 因为dao实现类是框架生成的</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>@Repository  ---&gt;  XXXDAO
@Service
@Controller 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@Scope注解</strong></p><p>作用：控制简单对象创建次数<br> 注意：不添加@Scope Spring提供默认值 singleton</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleton|prototype<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>@Lazy注解</strong></p><p>作用：延迟创建单实例对象<br> 注意：一旦使用了@Lazy注解后，Spring会在获取这个对象时候，才进行创建</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生命周期方法相关注解</p>`,57),r=n("strong",null,"构造后处理",-1),d=n("br",null,null,-1),k=n("strong",null,"销毁前处理",-1),m=n("br",null,null,-1),v=n("br",null,null,-1),g=e(`<h3 id="_3-2-注入相关注解" tabindex="-1"><a class="header-anchor" href="#_3-2-注入相关注解" aria-hidden="true">#</a> 3.2 注入相关注解</h3><p>用户自定义类型 <strong>@Autowired</strong></p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/202305291504099.png" alt="image-20200601114751016" tabindex="0" loading="lazy"><figcaption>image-20200601114751016</figcaption></figure><p><strong>@Autowired细节</strong></p><ol><li><p>Autowired注解基于类型进行注入 [推荐]<br> 基于类型的注入：注入对象的类型，必须与目标成员变量类型相同或者是其子类（实现类）</p></li><li><p>Autowired Qualifier 基于名字进行注入 [了解]<br> 基于名字的注入：注入对象的id值，必须与Qualifier注解中设置的名字相同</p></li><li><p>Autowired注解放置位置<br> a) 放置在对应成员变量的set方法上<br> b) 放置在成员变量之上，Spring通过反射直接对成员变量进行注入（赋值）[推荐]</p></li><li><p>JavaEE规范中类似功能的注解<br> JSR250 @Resouce(name=&quot;userDAOImpl&quot;) 基于名字进行注入<br> @Autowired()<br> @Qualifier(&quot;userDAOImpl&quot;)<br> 注意：如果在应用Resource注解时，名字没有配对成功，那么他会继续按照类型进行注入。<br> JSR330 @Inject 作用 @Autowired完全一致 基于类型进行注入 ---》 EJB3.0</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>JDK类型</p><p>@Value注解完成步骤：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 设置xxx.properties 
   id = 10
   name = suns
<span class="token list punctuation">2.</span> 告知Spring的工厂读取这个xxx.properties配置文件：
   	 方式一：applicationContext.xml文件中加：
   			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
   	 方式二：类上加 @PropertySource(&quot;&quot;) 注解，指明配置文件路径
<span class="token list punctuation">3.</span> 代码中获取：
   属性上加 @Value(&quot;\${key}&quot;) 注解
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@Value注解使用细节</strong></p><p><strong>@Value注解不能应用在静态成员变量上</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>  如果应用，赋值（注入）失败
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>@Value注解+Properties这种方式，不能注入集合类型</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Spring提供新的配置形式 YAML YML (SpringBoot)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-注解扫描详解" tabindex="-1"><a class="header-anchor" href="#_3-3-注解扫描详解" aria-hidden="true">#</a> 3.3 注解扫描详解</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 当前包 及其 子包  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-排除过滤" tabindex="-1"><a class="header-anchor" href="#_1-排除过滤" aria-hidden="true">#</a> 1. 排除过滤</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
   type: assignable:排除特定的类型 不进行扫描
         annotation:排除特定的注解 不进行扫描
         aspectj:切入点表达式（指定的包/类 不进行扫描）
                 包切入点： com.javatop.bean..*
                 类切入点： *..User
         regex:正则表达式 
         custom：自定义排除策略框(架底层开发才会使用)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>

排除策略可以叠加使用 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>assignable<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop.bean.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aspectj<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop.injection..*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-包含过滤" tabindex="-1"><a class="header-anchor" href="#_2-包含过滤" aria-hidden="true">#</a> 2. 包含过滤</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>

1. use-default-filters=&quot;false&quot;
   作用：让Spring默认的注解扫描方式 失效。
2. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
   作用：指定要扫描的注解 
   type:assignable:只扫描指定的类型
        annotation:只扫描指定的注解
        aspectj:切入点表达式（只扫描指定的包/类）
                包切入点： com.javatop.bean..*
                类切入点： *..User
        regex:正则表达式 
        custom：自定义排除策略框架底层开发

包含的方式也支持叠加
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>annotation<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.stereotype.Repository<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>annotation<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.stereotype.Service<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-对于注解开发的思考" tabindex="-1"><a class="header-anchor" href="#_3-4-对于注解开发的思考" aria-hidden="true">#</a> 3.4 对于注解开发的思考</h3><p>配置互通</p><p>含义：Spring注解配置和配置文件的配置，互通</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAOImpl</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>
   set get
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.javatop.service.UserServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 可以使用在java代码中使用 @Repository 注解配置的实例 --&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDAO<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDAOImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么情况下使用注解？什么情况下使用配置文件？</p><p><strong>@Component 替换 bean标签</strong></p><p>基础注解（@Component @Autowired @Value) 程序员开发类型的配置</p><ol><li><p>在程序员开发的类型上 可以加入对应注解 进行对象的创建<br> User UserService UserDAO UserAction</p></li><li><p>应用其他非程序员开发的类型时，还是需要使用&lt;bean 进行配置的<br> SqlSessionFactoryBean MapperScannerConfigure</p></li></ol><h3 id="_3-5-ssm整合开发半-注解开发" tabindex="-1"><a class="header-anchor" href="#_3-5-ssm整合开发半-注解开发" aria-hidden="true">#</a> 3.5 SSM整合开发半(注解开发)</h3><p>搭建开发环境</p><ul><li>引入相关jar 【SSM POM】</li><li>引入相关配置文件 <ul><li>applicationContext.xml</li><li>struts.xml</li><li>log4.properties</li><li>XXXMapper.xml</li></ul></li><li>初始化配置 <ul><li>Web.xml Spring (ContextLoaderListener)</li><li>Web.xml Struts Filter</li></ul></li></ul><p><strong>编码</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 开启工厂的注解扫描 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>DAO (Spring+Mybatis)</p><blockquote><ol><li>配置文件的配置 <ol><li>DataSource</li><li>SqlSessionFactory ----&gt; SqlSessionFactoryBean <ol><li>dataSource</li><li>typeAliasesPackage</li><li>mapperLocations</li></ol></li><li>MapperScannerConfigur ---&gt; DAO接口实现类</li></ol></li><li>编码 <ol><li>entity</li><li>table</li><li>DAO接口</li><li>实现Mapper文件</li></ol></li></ol></blockquote><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4.总结</h2><p>以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是<strong>Leo</strong>，一个在互联网行业的小白，立志成为更好的自己。</p><p>如果你想了解更多关于<strong>Leo</strong>，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png" alt="公众号封面" tabindex="0" loading="lazy"><figcaption>公众号封面</figcaption></figure>`,39);function b(h,q){const s=o("bean");return l(),c("div",null,[u,n("blockquote",null,[n("ol",null,[n("li",null,[a("初始化相关方法 @PostConstruct "),r,d,a(" InitializingBean"),t(s,{"init-method":""})]),n("li",null,[a("销毁方法 @PreDestroy "),k,m,a(" DisposableBean"),t(s,{"destory-method":""}),a("注意：1. 上述的2个注解并不是Spring提供的，JSR(JavaEE规范)520"),v,a(" 2. 再一次的验证，通过注解实现了接口的契约性")])])]),g])}const y=p(i,[["render",b],["__file","spring5-annotation-code01.html.vue"]]);export{y as default};
